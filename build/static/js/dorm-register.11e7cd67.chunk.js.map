{"version":3,"file":"static/js/dorm-register.11e7cd67.chunk.js","mappings":"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","sources":["config/styling.js","containers/form-validations/FormikFields.js","views/app/dorms/dorm-register.js"],"sourcesContent":["export const inputLabel = { fontSize: 16, fontWeight: 'bold' };\n","import React from 'react';\nimport Select from 'react-select';\nimport { CustomInput } from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\n\nimport TagsInput from 'react-tagsinput';\nimport 'react-tagsinput/react-tagsinput.css';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\n\nimport DatePicker from 'react-multi-date-picker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Input } from 'antd';\n\nconst FormikReactSelect = ({\n  name,\n  value,\n  options,\n  isMulti,\n  className,\n  onChange,\n  onBlur,\n  onClick,\n  defaultValue,\n  isDisabled,\n  isLoading,\n  isClearable,\n  isRtl,\n  isSearchable,\n  placeholder,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <Select\n      className={`react-select ${className}`}\n      classNamePrefix=\"react-select\"\n      placeholder={\n        placeholder || <IntlMessages id=\"forms.EducationLevelDefaultValue\" />\n      }\n      options={options}\n      isMulti={isMulti}\n      initial\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={value}\n      defaultValue={defaultValue}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      isClearable={isClearable}\n      isRtl={isRtl}\n      isSearchable={isSearchable}\n    />\n  );\n};\n\nconst FormikCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              name={name}\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value.includes(child.value)}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            id={`${name}_${child.value}_${index}`}\n            type=\"checkbox\"\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value.includes(child.value)}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCheckbox = ({ name, value, disabled, label, onChange, onBlur }) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <div className=\"position-relative form-check form-check-inline\">\n      <input\n        name={name}\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        checked={value}\n        disabled={disabled}\n      />\n      <label className=\"form-check-label\">{label}</label>\n    </div>\n  );\n};\n\nconst FormikCustomCheckbox = ({\n  name,\n  value,\n  disabled,\n  label,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <CustomInput\n      type=\"checkbox\"\n      id={name}\n      name={name}\n      label={label}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      checked={value}\n      disabled={disabled}\n      inline\n    />\n  );\n};\n\nconst FormikRadioButtonGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              id={child.value}\n              name={name}\n              type=\"radio\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value === child.value}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomRadioGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            type=\"radio\"\n            id={`${name}_${child.value}_${index}`}\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value === child.value}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikTagsInput = ({ name, value, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return <TagsInput name={name} value={value} onChange={handleChange} />;\n};\n\nconst FormikInputText = ({ name, value, onChange, onBlur, ...otherProps }) => {\n  // const handleChange = (val) => {\n  //   onBlur(name, true);\n  //   onChange(name, val);\n  // };\n  return (\n    <Input\n      name={name}\n      value={value}\n      onChange={onChange}\n      style={{ height: 48, borderRadius: 0 }}\n      {...otherProps}\n    />\n  );\n};\n\nconst FormikSwitch = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return (\n    <Switch\n      name={name}\n      className={className}\n      checked={value}\n      onChange={handleChange}\n    />\n  );\n};\n\nconst FormikDatePicker = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = (_val) => {\n    onBlur(name, true);\n  };\n\n  return (\n    <DatePicker\n      name={name}\n      className={className}\n      selected={value}\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n\nexport {\n  FormikReactSelect,\n  FormikCheckboxGroup,\n  FormikCustomCheckboxGroup,\n  FormikCheckbox,\n  FormikCustomCheckbox,\n  FormikRadioButtonGroup,\n  FormikCustomRadioGroup,\n  FormikTagsInput,\n  FormikInputText,\n  FormikSwitch,\n  FormikDatePicker,\n};\n","import React, { useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { publicBuildingOwnerOptions } from '../global-data/options';\nimport { privateBuildingTypeOptions } from '../global-data/options';\nimport { BuildingTypeOptions } from '../global-data/options';\nimport { dormGenderOptions } from '../global-data/options';\nimport './dorm-register.css';\nimport callApi from 'helpers/callApi';\nimport { NotificationManager } from 'components/common/react-notifications';\n\nimport { Row, Card, CardBody, FormGroup, Label, Button } from 'reactstrap';\n\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport { useParams } from 'react-router-dom';\n\nimport { FormikReactSelect } from 'containers/form-validations/FormikFields';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { AuthContext } from 'context/AuthContext';\nimport { inputLabel } from 'config/styling';\n\nconst DormRegistration = (values) => {\n  const { provinces } = useContext(AuthContext);\n  const [updatingDorm, setUpdatingDorm] = useState([]);\n  const [initialName, setInitialName] = useState('');\n  const [initialCapicity, setInitialCapicity] = useState('');\n  const [initialTotalKitchens, setInitialTotalKitchens] = useState('');\n  const [initialGender, setInitialGender] = useState([]);\n  const [initialBuildingType, setInitialBuildingType] = useState([]);\n  const [initialPublicBuildingOwner, setInitialPublicBuildingOwner] = useState(\n    [],\n  );\n  const [initialPrivateBuildingType, setInitialPrivateBuildingType] = useState(\n    [],\n  );\n  const [initialQuota, setInitialQuota] = useState('');\n  const [initialTotalRooms, setInitialTotalRooms] = useState('');\n  const [initialTotalBuildingNo, setInitialTotalBuildingNo] = useState('');\n  const [initialToilet, setInitialToilet] = useState('');\n  const [initialProvince, setInitialProvince] = useState([]);\n  const [initialDistrict, setInitialDistrict] = useState([]);\n  // const [provinces, setProvinces] = useState([]);\n  const [districts, setDistricts] = useState([]);\n  const [selectedProvince, setSelectedProvince] = useState('');\n  const { dormId } = useParams();\n  //console.log('Dorm info', dormId);\n  async function fetchData() {\n    // const { data } = await axios.get(`${dormAPI}/?id=${dormId}`);\n    const response = await callApi(`institute/dorms/?id=${dormId}`);\n    const updValues = response?.data.results[0];\n    setUpdatingDorm(updValues);\n    console.log(updValues, 'response?.data');\n    setInitialName(updValues.name);\n    setInitialCapicity(updValues.capacity);\n    setInitialTotalKitchens(updValues.number_of_kitchens);\n    // BuildingTypeOptions.map((dormType) => {\n    //   if (dormType.value === updValues.building_ownership) {\n    //     setInitialBuildingType(dormType);\n    //   }\n    // });\n    setInitialBuildingType(\n      BuildingTypeOptions.find(\n        (option) => option.value === updValues.building_ownership,\n      ),\n    );\n\n    // publicBuildingOwnerOptions.map((publicDorm) => {\n    //   if (publicDorm.value === updValues.dorm_type_option) {\n    //     setInitialPublicBuildingOwner(publicDorm);\n    //   }\n    // });\n    setInitialPublicBuildingOwner(\n      publicBuildingOwnerOptions.find(\n        (option) => option.value === updValues.building_type_option,\n      ),\n    );\n\n    // privateBuildingTypeOptions.map((privateDormType) => {\n    //   if (privateDormType.value === updValues.dorm_type_option) {\n    //     setInitialPrivateBuildingType(privateDormType);\n    //   }\n    // });\n\n    setInitialPrivateBuildingType(\n      privateBuildingTypeOptions.find(\n        (option) => option.value === updValues.building_type_option,\n      ),\n    );\n\n    setInitialProvince(\n      provinces.find((option) => option.value === updValues.province),\n    );\n\n    setInitialDistrict(\n      districts.find((option) => option.value === updValues.district),\n    );\n\n    dormGenderOptions.map((gender) => {\n      if (gender.value === updValues.gender) {\n        setInitialGender(gender);\n      }\n    });\n\n    setInitialTotalRooms(updValues.number_of_rooms);\n    setInitialTotalBuildingNo(updValues.number_of_buildings);\n    setInitialToilet(updValues.number_of_toilets);\n    // setInitialDistrict(updValues.district);\n    setInitialQuota(updValues.quota);\n  }\n  useEffect(() => {\n    if (dormId) {\n      fetchData();\n    }\n    //setUpdateMode(true);\n  }, []);\n\n  // const fetchProvinces = async () => {\n  //   const response = await callApi('core/provinces/', 'GET', null);\n  //   if (response.data && response.status === 200) {\n  //     const updatedData = await response?.data.map((item) => ({\n  //       value: item.id,\n  //       label: item.native_name,\n  //     }));\n\n  //     setProvinces(updatedData);\n  //   } else {\n  //     console.log('province error');\n  //   }\n  // };\n\n  const fetchDistricts = async (provinceId) => {\n    console.log('provinceId', provinceId);\n    const response = await callApi(\n      `core/districts/?province=${provinceId}`,\n      'GET',\n      null,\n    );\n    if (response.data && response.status === 200) {\n      const updatedData = await response?.data.map((item) => ({\n        value: item.id,\n        label: item.native_name,\n      }));\n      setDistricts(updatedData);\n    } else {\n      console.log('district error');\n    }\n  };\n\n  // useEffect(() => {\n  //   fetchProvinces();\n  // }, []);\n\n  useEffect(() => {\n    console.log('selectedProvince', selectedProvince);\n    if (selectedProvince) {\n      fetchDistricts(selectedProvince);\n    }\n  }, [selectedProvince]);\n\n  const initialValues = {\n    name: initialName,\n    capicity: initialCapicity,\n    totalKitchens: initialTotalKitchens,\n    gender: initialGender,\n    buildingType: initialBuildingType,\n    PublicBuildingOwner: initialPublicBuildingOwner,\n    privateBuildingType: initialPrivateBuildingType,\n    quota: initialQuota,\n    totalRooms: initialTotalRooms,\n    totalBuildingNo: initialTotalBuildingNo,\n    toilet: initialToilet,\n    province: initialProvince,\n    district: initialDistrict,\n  };\n\n  // notification message\n  const createNotification = (type, className) => {\n    const cName = className || '';\n    switch (type) {\n      case 'success':\n        NotificationManager.success(\n          'لیله موفقان ثبت شوو',\n          'موفقیت',\n          3000,\n          null,\n          null,\n          cName,\n        );\n        break;\n      case 'error':\n        NotificationManager.error(\n          'لیلیه ثبت نشو، بیا کوشش وکری',\n          'خطا',\n          9000,\n          () => {\n            alert('callback');\n          },\n          null,\n          cName,\n        );\n        break;\n      default:\n        NotificationManager.info('Info message');\n        break;\n    }\n  };\n  const [isNext, setIsNext] = useState(false);\n\n  // post dorm record to the backend\n  const postDormRecord = async (data) => {\n    const apiParams = {\n      endPoint: 'institute/dorms/',\n      method: 'POST',\n    };\n    if (dormId) {\n      apiParams.endPoint = `institute/dorms/${dormId}/`;\n      apiParams.method = 'PATCH';\n    }\n    const response = await callApi(apiParams.endPoint, apiParams.method, data);\n    if (response) {\n      createNotification('success', 'filled');\n      setIsNext(true);\n      console.log('success message', response.data);\n    } else {\n      createNotification('error', 'filled');\n      console.log('class error');\n    }\n  };\n\n  const onRegister = (values, { resetForm }) => {\n    // resetForm();\n    let DormTypeOptions = '';\n    if (values.buildingType.value === 'governmental')\n      DormTypeOptions = values.PublicBuildingOwner?.value;\n    else DormTypeOptions = values.privateBuildingType?.value;\n    const data = {\n      name: values?.name,\n      province: values.province?.value,\n      district: values.district?.value,\n      gender: values.gender?.value,\n      building_ownership: values.buildingType?.value,\n      building_type_option: DormTypeOptions,\n      number_of_buildings: values?.totalBuildingNo,\n      number_of_rooms: values?.totalRooms,\n      number_of_kitchens: values?.totalKitchens,\n      number_of_toilets: values?.toilet,\n      quota: values?.quota || null,\n      capacity: values?.capicity,\n    };\n    postDormRecord(data);\n  };\n\n  return (\n    <>\n      {console.log('updateingDorm', updatingDorm)}\n      <Card>\n        <h3 style={{ fontSize: 25, fontWeight: 'bold' }} className=\"mt-5 m-5\">\n          {<IntlMessages id=\"dorm.RegisterTitle\" />}\n        </h3>\n        <CardBody>\n          {!isNext ? (\n            <Formik\n              enableReinitialize={true}\n              initialValues={initialValues}\n              onSubmit={onRegister}\n              // validationSchema={SignupSchema}\n            >\n              {({\n                errors,\n                touched,\n                values,\n                setFieldTouched,\n                setFieldValue,\n                resetForm,\n              }) => (\n                <Form className=\"av-tooltip tooltip-label-right error-l-100\">\n                  <Row className=\"justify-content-center inlineBlock\">\n                    <Colxx xxs=\"\">\n                      {/* Dorm Name */}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.NameLabel\" />\n                        </Label>\n                        <Field className=\"form-control\" name=\"name\" />\n                        {errors.name && touched.name ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.name}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      {/* Dorm Capicity */}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.CapicityLabel\" />\n                        </Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"capicity\"\n                          type=\"number\"\n                        />\n                        {errors.capicity && touched.capicity ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.capicity}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      {/* Building Type */}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.BuildingTypeLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"buildingType\"\n                          id=\"buildingType\"\n                          value={values.buildingType}\n                          options={BuildingTypeOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          required\n                        />\n                        {errors.buildingType && touched.buildingType ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.buildingType}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      {values.buildingType.value == 'governmental' ? (\n                        <div>\n                          {/* DormOwner */}\n                          <FormGroup className=\"form-group has-float-label\">\n                            <Label style={inputLabel}>\n                              <IntlMessages id=\"dorm.PublicBuildingOwnerLabel\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"PublicBuildingOwner\"\n                              id=\"PublicBuildingOwner\"\n                              value={values.PublicBuildingOwner}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              options={publicBuildingOwnerOptions}\n                            />\n                            {errors.PublicBuildingOwner &&\n                            touched.PublicBuildingOwner ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white\">\n                                {errors.PublicBuildingOwner}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n                        </div>\n                      ) : (\n                        <div>\n                          {/* Private Building Students */}\n                          <FormGroup className=\"form-group has-float-label\">\n                            <Label style={inputLabel}>\n                              <IntlMessages id=\"dorm.PrivateBuildingTypeLabel\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"privateBuildingType\"\n                              id=\"privateBuildingType\"\n                              value={values.privateBuildingType}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              options={privateBuildingTypeOptions}\n                              required\n                            />\n                            {errors.privateBuildingType &&\n                            touched.privateBuildingType ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white\">\n                                {errors.privateBuildingType}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n                        </div>\n                      )}\n\n                      {/* Total Number of Kitchen*/}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.TotalKitchensLabel\" />\n                        </Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"totalKitchens\"\n                          type=\"number\"\n                        />\n                        {errors.totalKitchens && touched.totalKitchens ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.totalKitchens}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"forms.ProvinceLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"province\"\n                          id=\"province\"\n                          value={values.province}\n                          options={provinces}\n                          onChange={setFieldValue} //onChange should conatain single line\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedProvince(values.province.value)}\n                        />\n                        {errors.province && touched.province ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.province}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                      {/* District  permanent*/}\n                      <FormGroup className=\"form-group has-float-label error-l-175\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"forms.DistrictLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"district\"\n                          id=\"district\"\n                          value={values.district}\n                          options={districts}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                        />\n                        {errors.district && touched.district ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.district}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n\n                    <Colxx xxs=\"\">\n                      {/* Dorm Gender*/}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.Gender\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"gender\"\n                          id=\"gender\"\n                          value={values.gender}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          options={dormGenderOptions}\n                          required\n                        />\n                        {errors.gender && touched.gender ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.gender}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      {/* Dorm Quota(Sahmiya) */}\n                      {/* <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.QuotaLabel\" />\n                        </Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"quota\"\n                          type=\"number\"\n                        />\n                        {errors.quota && touched.quota ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.quota}\n                          </div>\n                        ) : null}\n                      </FormGroup> */}\n\n                      {/* Total Number of Buildings*/}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.TotalBuildingNoLabel\" />\n                        </Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"totalBuildingNo\"\n                          type=\"number\"\n                        />\n                        {errors.totalBuildingNo && touched.totalBuildingNo ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.totalBuildingNo}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      {/* Total Number of Rooms*/}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.TotalRoomsLabel\" />\n                        </Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"totalRooms\"\n                          type=\"number\"\n                        />\n                        {errors.totalRooms && touched.totalRooms ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.totalRooms}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      {/* Total Number of Toilet*/}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"dorm.ToiletLabel\" />\n                        </Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"toilet\"\n                          type=\"number\"\n                        />\n                        {errors.toilet && touched.toilet ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.toilet}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n                  </Row>\n                  <Row>\n                    {' '}\n                    <Colxx style={{ marginLeft: '5%', marginBottom: '8%' }}>\n                      <Button\n                        className=\"float-right m-5 \"\n                        size=\"lg\"\n                        type=\"submit\"\n                        color=\"primary\"\n                      >\n                        <span className=\"spinner d-inline-block\">\n                          <span className=\"bounce1\" />\n                          <span className=\"bounce2\" />\n                          <span className=\"bounce3\" />\n                        </span>\n                        <span className=\"label\" style={inputLabel}>\n                          <IntlMessages id=\"forms.SubimssionButton\" />\n                        </span>\n                      </Button>\n                    </Colxx>\n                  </Row>\n                </Form>\n              )}\n            </Formik>\n          ) : (\n            <div\n              className=\"wizard-basic-step text-center pt-3 \"\n              style={{ minHeight: '400px' }}\n            >\n              <div>\n                <h1 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h1>\n                <h3>\n                  <IntlMessages id=\"wizard.registered\" />\n                </h3>\n                <Button\n                  className=\"m-5 bg-primary\"\n                  onClick={() => setIsNext(false)}\n                >\n                  <IntlMessages id=\"button.back\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default DormRegistration;\n"],"names":["inputLabel","fontSize","fontWeight","FormikReactSelect","_ref","name","value","options","isMulti","className","onChange","onBlur","defaultValue","onClick","isDisabled","isLoading","isClearable","isRtl","isSearchable","placeholder","_jsx","Select","concat","classNamePrefix","IntlMessages","id","initial","val","FormikInputText","_ref9","otherProps","_objectWithoutProperties","_excluded","Input","_objectSpread","style","height","borderRadius","FormikDatePicker","_ref11","DatePicker","selected","_val","values","provinces","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","updatingDorm","setUpdatingDorm","_useState3","_useState4","initialName","setInitialName","_useState5","_useState6","initialCapicity","setInitialCapicity","_useState7","_useState8","initialTotalKitchens","setInitialTotalKitchens","_useState9","_useState10","initialGender","setInitialGender","_useState11","_useState12","initialBuildingType","setInitialBuildingType","_useState13","_useState14","initialPublicBuildingOwner","setInitialPublicBuildingOwner","_useState15","_useState16","initialPrivateBuildingType","setInitialPrivateBuildingType","_useState17","_useState18","initialQuota","setInitialQuota","_useState19","_useState20","initialTotalRooms","setInitialTotalRooms","_useState21","_useState22","initialTotalBuildingNo","setInitialTotalBuildingNo","_useState23","_useState24","initialToilet","setInitialToilet","_useState25","_useState26","initialProvince","setInitialProvince","_useState27","_useState28","initialDistrict","setInitialDistrict","_useState29","_useState30","districts","setDistricts","_useState31","_useState32","selectedProvince","setSelectedProvince","dormId","useParams","_fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","response","updValues","wrap","_context3","prev","next","callApi","sent","data","results","console","log","capacity","number_of_kitchens","BuildingTypeOptions","find","option","building_ownership","publicBuildingOwnerOptions","building_type_option","privateBuildingTypeOptions","province","district","dormGenderOptions","map","gender","number_of_rooms","number_of_buildings","number_of_toilets","quota","stop","apply","arguments","useEffect","fetchData","fetchDistricts","_callee","provinceId","updatedData","_context","status","item","label","native_name","_x","initialValues","capicity","totalKitchens","buildingType","PublicBuildingOwner","privateBuildingType","totalRooms","totalBuildingNo","toilet","createNotification","type","cName","NotificationManager","success","error","alert","info","_useState33","_useState34","isNext","setIsNext","postDormRecord","_ref2","_callee2","apiParams","_context2","endPoint","method","_x2","_jsxs","_Fragment","children","Card","CardBody","minHeight","Button","Formik","enableReinitialize","onSubmit","_ref3","resetForm","_values$PublicBuildin","_values$privateBuildi","_values$province","_values$district","_values$gender","_values$buildingType","DormTypeOptions","_ref4","errors","touched","setFieldTouched","setFieldValue","Form","Row","Colxx","xxs","FormGroup","Label","Field","required","marginLeft","marginBottom","size","color"],"sourceRoot":""}