{"version":3,"file":"static/js/field-register.dcb303e4.chunk.js","mappings":"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","sources":["config/styling.js","containers/form-validations/FormikFields.js","views/app/fields/field-register.js"],"sourcesContent":["export const inputLabel = { fontSize: 16, fontWeight: 'bold' };\nexport const buttonStyle = { fontSize: 16 };\n","import React from 'react';\nimport Select from 'react-select';\nimport { CustomInput } from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\n\nimport TagsInput from 'react-tagsinput';\nimport 'react-tagsinput/react-tagsinput.css';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\n\nimport DatePicker from 'react-multi-date-picker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Input } from 'antd';\n\nconst FormikReactSelect = ({\n  name,\n  value,\n  options,\n  isMulti,\n  className,\n  onChange,\n  onBlur,\n  onClick,\n  defaultValue,\n  isDisabled,\n  isLoading,\n  isClearable,\n  isRtl,\n  isSearchable,\n  placeholder,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <Select\n      className={`react-select ${className}`}\n      classNamePrefix=\"react-select\"\n      placeholder={\n        placeholder || <IntlMessages id=\"forms.EducationLevelDefaultValue\" />\n      }\n      options={options}\n      isMulti={isMulti}\n      initial\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={value}\n      defaultValue={defaultValue}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      isClearable={isClearable}\n      isRtl={isRtl}\n      isSearchable={isSearchable}\n    />\n  );\n};\n\nconst FormikCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              name={name}\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value.includes(child.value)}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            id={`${name}_${child.value}_${index}`}\n            type=\"checkbox\"\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value.includes(child.value)}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCheckbox = ({ name, value, disabled, label, onChange, onBlur }) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <div className=\"position-relative form-check form-check-inline\">\n      <input\n        name={name}\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        checked={value}\n        disabled={disabled}\n      />\n      <label className=\"form-check-label\">{label}</label>\n    </div>\n  );\n};\n\nconst FormikCustomCheckbox = ({\n  name,\n  value,\n  disabled,\n  label,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <CustomInput\n      type=\"checkbox\"\n      id={name}\n      name={name}\n      label={label}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      checked={value}\n      disabled={disabled}\n      inline\n    />\n  );\n};\n\nconst FormikRadioButtonGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              id={child.value}\n              name={name}\n              type=\"radio\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value === child.value}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomRadioGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            type=\"radio\"\n            id={`${name}_${child.value}_${index}`}\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value === child.value}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikTagsInput = ({ name, value, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return <TagsInput name={name} value={value} onChange={handleChange} />;\n};\n\nconst FormikInputText = ({ name, value, onChange, onBlur, ...otherProps }) => {\n  // const handleChange = (val) => {\n  //   onBlur(name, true);\n  //   onChange(name, val);\n  // };\n  return (\n    <Input\n      name={name}\n      value={value}\n      onChange={onChange}\n      style={{ height: 48, borderRadius: 0 }}\n      {...otherProps}\n    />\n  );\n};\n\nconst FormikSwitch = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return (\n    <Switch\n      name={name}\n      className={className}\n      checked={value}\n      onChange={handleChange}\n    />\n  );\n};\n\nconst FormikDatePicker = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = (_val) => {\n    onBlur(name, true);\n  };\n\n  return (\n    <DatePicker\n      name={name}\n      className={className}\n      selected={value}\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n\nexport {\n  FormikReactSelect,\n  FormikCheckboxGroup,\n  FormikCustomCheckboxGroup,\n  FormikCheckbox,\n  FormikCustomCheckbox,\n  FormikRadioButtonGroup,\n  FormikCustomRadioGroup,\n  FormikTagsInput,\n  FormikInputText,\n  FormikSwitch,\n  FormikDatePicker,\n};\n","import React, { useState, useEffect } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport callApi from 'helpers/callApi';\nimport { NotificationManager } from 'components/common/react-notifications';\nimport * as Yup from 'yup';\nimport { Row, Card, CardBody, FormGroup, Label, Button } from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport { FormikReactSelect } from '../../../containers/form-validations/FormikFields';\nimport { inputLabel } from 'config/styling';\n\nconst fieldRegisterSchema = Yup.object().shape({\n  fieldName: Yup.string()\n    //  .min(3, <IntlMessages id=\"forms.StdId\" />)\n    .required(<IntlMessages id=\"field.FieldNameErr\" />),\n\n  fieldEnglishName: Yup.string().required(\n    <IntlMessages id=\"field.FieldEngNameErr\" />,\n  ),\n\n  sector: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.sectorErr\" />),\n});\n\n//const sectorOptions = [\n//   { value: '1', label: 'economic' },\n//   { value: '2', label: 'technology' },\n//   { value: '3', label: 'agriculture' },\n// ];\n\nconst FieldRegister = () => {\n  const [isNext, setIsNext] = useState(false);\n  const [sectorOptions, setSectorOptions] = useState([]);\n\n  //fetch sector list\n  const fetchSectors = async () => {\n    const response = await callApi('institute/sectors/', 'GET', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.sector,\n      }));\n      setSectorOptions(updatedData);\n    } else {\n      console.log('class error');\n    }\n  };\n  useEffect(() => {\n    fetchSectors();\n  }, []);\n\n  const createNotification = (type, className) => {\n    const cName = className || '';\n    switch (type) {\n      case 'success':\n        NotificationManager.success(\n          'رشته موفقانه ثبت شوو',\n          'موفقیت',\n          3000,\n          null,\n          null,\n          cName,\n        );\n        break;\n      case 'error':\n        NotificationManager.error(\n          'رشته ثبت نشو، بیا کوشش وکری',\n          'خطا',\n          9000,\n          () => {\n            alert('callback');\n          },\n          null,\n          cName,\n        );\n        break;\n      default:\n        NotificationManager.info('Info message');\n        break;\n    }\n  };\n\n  // post student record to server\n  const postStudentRecord = async (data) => {\n    const response = await callApi(\n      'institute/department-create/',\n      'POST',\n      data,\n    );\n    if (response) {\n      createNotification('success', 'filled');\n      // resetForm();\n      setIsNext(true);\n      console.log('success message', response.data);\n    } else {\n      createNotification('error', 'filled');\n      console.log('class error');\n    }\n  };\n  const onSubmit = (values, { resetForm }) => {\n    const data = {\n      name: values.fieldName,\n      english_name: values.fieldEnglishName,\n      sector: values.sector.value,\n    };\n    console.log('data', data);\n    postStudentRecord(data);\n  };\n\n  return (\n    <>\n      <Card>\n        <h3 style={{ fontSize: 25, fontWeight: 'bold' }} className=\"mt-5 m-5\">\n          {<IntlMessages id=\"field.FieldRegisterTitle\" />}\n        </h3>\n        <CardBody>\n          {!isNext ? (\n            <Formik\n              initialValues={{\n                fieldId: '',\n                fieldName: '',\n                fieldEnglishName: '',\n                sector: [],\n              }}\n              validationSchema={fieldRegisterSchema}\n              onSubmit={onSubmit}\n            >\n              {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                resetForm,\n              }) => (\n                <Form className=\"av-tooltip tooltip-label-right error-l-175\">\n                  <Row className=\"justify-content-center\">\n                    <Colxx xxs=\"10\">\n                      {/* Field Name */}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"field.FieldNameLabel\" />\n                        </Label>\n\n                        <Field className=\"form-control\" name=\"fieldName\" />\n                        {errors.fieldName && touched.fieldName ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.fieldName}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      {/* Field Name In English */}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"field.FieldEngNameLabel\" />\n                        </Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"fieldEnglishName\"\n                        />\n                        {errors.fieldEnglishName && touched.fieldEnglishName ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.fieldEnglishName}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      {/* sector*/}\n                      <FormGroup className=\"form-group has-float-label\">\n                        <Label style={inputLabel}>\n                          <IntlMessages id=\"forms.sector\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"sector\"\n                          id=\"sector\"\n                          value={values.sector}\n                          options={sectorOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                        />\n                        {errors.sector && touched.sector ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.sector}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n                  </Row>\n                  <Row>\n                    {' '}\n                    <Colxx style={{ marginLeft: '5%', marginBottom: '8%' }}>\n                      <Button\n                        className=\"float-right m-5 \"\n                        size=\"lg\"\n                        type=\"submit\"\n                        color=\"primary\"\n                      >\n                        <span className=\"spinner d-inline-block\">\n                          <span className=\"bounce1\" />\n                          <span className=\"bounce2\" />\n                          <span className=\"bounce3\" />\n                        </span>\n                        <span className=\"label\" style={inputLabel}>\n                          <IntlMessages id=\"forms.SubimssionButton\" />\n                        </span>\n                      </Button>\n                    </Colxx>\n                  </Row>\n                </Form>\n              )}\n            </Formik>\n          ) : (\n            <div\n              className=\"wizard-basic-step text-center pt-3 \"\n              style={{ minHeight: '400px' }}\n            >\n              <div>\n                <h1 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h1>\n                <h3>\n                  <IntlMessages id=\"wizard.registered\" />\n                </h3>\n                <Button\n                  className=\"m-5 bg-primary\"\n                  onClick={() => setIsNext(false)}\n                >\n                  <IntlMessages id=\"button.back\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default FieldRegister;\n"],"names":["inputLabel","fontSize","fontWeight","buttonStyle","FormikReactSelect","_ref","name","value","options","isMulti","className","onChange","onBlur","defaultValue","onClick","isDisabled","isLoading","isClearable","isRtl","isSearchable","placeholder","_jsx","Select","concat","classNamePrefix","IntlMessages","id","initial","val","FormikInputText","_ref9","otherProps","_objectWithoutProperties","_excluded","Input","_objectSpread","style","height","borderRadius","FormikDatePicker","_ref11","DatePicker","selected","_val","fieldRegisterSchema","Yup","shape","fieldName","required","fieldEnglishName","sector","nullable","_useState","useState","_useState2","_slicedToArray","isNext","setIsNext","_useState3","_useState4","sectorOptions","setSectorOptions","fetchSectors","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","updatedData","wrap","_context","prev","next","callApi","sent","data","status","map","item","label","console","log","stop","apply","arguments","useEffect","createNotification","type","cName","NotificationManager","success","error","alert","info","postStudentRecord","_ref2","_callee2","_context2","_x","_Fragment","children","_jsxs","Card","CardBody","minHeight","Button","Formik","initialValues","fieldId","validationSchema","onSubmit","values","_ref3","resetForm","english_name","_ref4","handleSubmit","setFieldValue","setFieldTouched","handleChange","handleBlur","errors","touched","Form","Row","Colxx","xxs","FormGroup","Label","Field","marginLeft","marginBottom","size","color"],"sourceRoot":""}