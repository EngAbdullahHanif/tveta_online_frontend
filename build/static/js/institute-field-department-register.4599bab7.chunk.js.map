{"version":3,"file":"static/js/institute-field-department-register.4599bab7.chunk.js","mappings":"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","sources":["config/index.js","config/production.js","containers/form-validations/FormikFields.js","views/app/fields/institute-field-department-register.js"],"sourcesContent":["let config;\n\nif (process.env.NODE_ENV) {\n  if (process.env.NODE_ENV === 'production') {\n    config = require('./production');\n  } else {\n    config = require('./development');\n  }\n} else {\n  config = require('./development');\n}\n\nexport default config;\n","const API_URL = 'http://103.132.98.58:8000';\n\nexport { API_URL };\n","import React from 'react';\nimport Select from 'react-select';\nimport { CustomInput } from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\n\nimport TagsInput from 'react-tagsinput';\nimport 'react-tagsinput/react-tagsinput.css';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\n\nimport DatePicker from 'react-multi-date-picker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Input } from 'antd';\n\nconst FormikReactSelect = ({\n  name,\n  value,\n  options,\n  isMulti,\n  className,\n  onChange,\n  onBlur,\n  onClick,\n  defaultValue,\n  isDisabled,\n  isLoading,\n  isClearable,\n  isRtl,\n  isSearchable,\n  placeholder,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <Select\n      className={`react-select ${className}`}\n      classNamePrefix=\"react-select\"\n      placeholder={\n        placeholder || <IntlMessages id=\"forms.EducationLevelDefaultValue\" />\n      }\n      options={options}\n      isMulti={isMulti}\n      initial\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={value}\n      defaultValue={defaultValue}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      isClearable={isClearable}\n      isRtl={isRtl}\n      isSearchable={isSearchable}\n    />\n  );\n};\n\nconst FormikCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              name={name}\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value.includes(child.value)}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            id={`${name}_${child.value}_${index}`}\n            type=\"checkbox\"\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value.includes(child.value)}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCheckbox = ({ name, value, disabled, label, onChange, onBlur }) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <div className=\"position-relative form-check form-check-inline\">\n      <input\n        name={name}\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        checked={value}\n        disabled={disabled}\n      />\n      <label className=\"form-check-label\">{label}</label>\n    </div>\n  );\n};\n\nconst FormikCustomCheckbox = ({\n  name,\n  value,\n  disabled,\n  label,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <CustomInput\n      type=\"checkbox\"\n      id={name}\n      name={name}\n      label={label}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      checked={value}\n      disabled={disabled}\n      inline\n    />\n  );\n};\n\nconst FormikRadioButtonGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              id={child.value}\n              name={name}\n              type=\"radio\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value === child.value}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomRadioGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            type=\"radio\"\n            id={`${name}_${child.value}_${index}`}\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value === child.value}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikTagsInput = ({ name, value, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return <TagsInput name={name} value={value} onChange={handleChange} />;\n};\n\nconst FormikInputText = ({ name, value, onChange, onBlur, ...otherProps }) => {\n  // const handleChange = (val) => {\n  //   onBlur(name, true);\n  //   onChange(name, val);\n  // };\n  return (\n    <Input\n      name={name}\n      value={value}\n      onChange={onChange}\n      style={{ height: 48, borderRadius: 0 }}\n      {...otherProps}\n    />\n  );\n};\n\nconst FormikSwitch = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return (\n    <Switch\n      name={name}\n      className={className}\n      checked={value}\n      onChange={handleChange}\n    />\n  );\n};\n\nconst FormikDatePicker = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = (_val) => {\n    onBlur(name, true);\n  };\n\n  return (\n    <DatePicker\n      name={name}\n      className={className}\n      selected={value}\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n\nexport {\n  FormikReactSelect,\n  FormikCheckboxGroup,\n  FormikCustomCheckboxGroup,\n  FormikCheckbox,\n  FormikCustomCheckbox,\n  FormikRadioButtonGroup,\n  FormikCustomRadioGroup,\n  FormikTagsInput,\n  FormikInputText,\n  FormikSwitch,\n  FormikDatePicker,\n};\n","import React, { useState, useEffect } from 'react';\nimport { Formik, Form } from 'formik';\nimport axios from 'axios';\n\nimport * as Yup from 'yup';\nimport { Row, Card, CardBody, FormGroup, Label, Button } from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport { FormikReactSelect } from '../../../containers/form-validations/FormikFields';\n\nimport config from '../../../config';\n\nconst servicePath = config.API_URL;\nconst fieldsApiUrl = `${servicePath}/institute/field/`;\nconst departmentRegisterationApiUrl = `${servicePath}/institute/department-create/`;\n\nconst SignupSchema = Yup.object().shape({\n  FieldId: Yup.string().required(<IntlMessages id=\"field.FieldIdErr\" />),\n\n  FieldName: Yup.string()\n    //  .min(3, <IntlMessages id=\"forms.StdId\" />)\n    .required(<IntlMessages id=\"field.FieldNameErr\" />),\n\n  FieldEngName: Yup.string().required(\n    <IntlMessages id=\"field.FieldEngNameErr\" />,\n  ),\n});\n\nconst InstituteFieldDepartmentRegister = () => {\n  const [fields, setFields] = useState([]);\n\n  const fetchFields = async () => {\n    const response = await axios.get(fieldsApiUrl);\n    const updatedData = await response.data.map((item) => ({\n      value: item.id,\n      label: item.name,\n    }));\n    setFields(updatedData);\n  };\n\n  useEffect(() => {\n    fetchFields();\n  }, []);\n  const onSubmit = (values) => {\n    console.log('values', values);\n\n    //remove the user_id after authentication is done\n    const data = {\n      filed: values.field.value,\n      name: values.departmentName,\n      english_name: values.departmentEnglishName,\n      user_id: 1,\n    };\n\n    axios\n      .post(departmentRegisterationApiUrl, data)\n      .then((res) => {\n        console.log('success');\n      })\n      .catch((err) => {\n        console.log('failed');\n      });\n  };\n\n  return (\n    <>\n      <Card>\n        <h3 className=\"mt-5 m-5\">\n          {/* {<IntlMessages id=\"field.FieldRegisterTitle\" />} */}\n          Institute Field Department Register\n        </h3>\n        <CardBody>\n          <Formik\n            initialValues={{}}\n            // validationSchema={SignupSchema}\n            onSubmit={onSubmit}\n          >\n            {({\n              handleSubmit,\n              setFieldValue,\n              setFieldTouched,\n              handleChange,\n              handleBlur,\n              values,\n              errors,\n              touched,\n              isSubmitting,\n            }) => (\n              <Form className=\"av-tooltip tooltip-label-bottom\">\n                <Row className=\"justify-content-center\">\n                  <Colxx xxs=\"6\">\n                    {/* field*/}\n                    <FormGroup className=\"form-group has-float-label\">\n                      <Label>\n                        {/* <IntlMessages id=\"forms.field\" /> */}\n                        field\n                      </Label>\n                      <FormikReactSelect\n                        name=\"field\"\n                        id=\"field\"\n                        value={values.field}\n                        options={fields}\n                        onChange={setFieldValue}\n                        onBlur={setFieldTouched}\n                      />\n                      {errors.field && touched.field ? (\n                        <div className=\"invalid-feedback d-block\">\n                          {errors.field}\n                        </div>\n                      ) : null}\n                    </FormGroup>\n                  </Colxx>\n                  <Colxx xxs=\"6\">\n                    {/* field*/}\n                    <FormGroup className=\"form-group has-float-label\">\n                      <Label>\n                        {/* <IntlMessages id=\"forms.field\" /> */}\n                        field\n                      </Label>\n                      <FormikReactSelect\n                        name=\"field\"\n                        id=\"field\"\n                        value={values.field}\n                        options={fields}\n                        onChange={setFieldValue}\n                        onBlur={setFieldTouched}\n                      />\n                      {errors.field && touched.field ? (\n                        <div className=\"invalid-feedback d-block\">\n                          {errors.field}\n                        </div>\n                      ) : null}\n                    </FormGroup>\n                  </Colxx>\n                  <Button className=\"float-right m-3 \">\n                    {<IntlMessages id=\"forms.SubimssionButton\" />}\n                  </Button>\n                </Row>\n              </Form>\n            )}\n          </Formik>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default InstituteFieldDepartmentRegister;\n"],"names":["config","require","API_URL","FormikReactSelect","_ref","name","value","options","isMulti","className","onChange","onBlur","defaultValue","onClick","isDisabled","isLoading","isClearable","isRtl","isSearchable","placeholder","_jsx","Select","concat","classNamePrefix","IntlMessages","id","initial","val","FormikInputText","_ref9","otherProps","_objectWithoutProperties","_excluded","Input","_objectSpread","style","height","borderRadius","FormikDatePicker","_ref11","DatePicker","selected","_val","servicePath","fieldsApiUrl","departmentRegisterationApiUrl","Yup","shape","FieldId","required","FieldName","FieldEngName","_useState","useState","_useState2","_slicedToArray","fields","setFields","fetchFields","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","updatedData","wrap","_context","prev","next","axios","sent","data","map","item","label","stop","apply","arguments","useEffect","_Fragment","children","_jsxs","Card","CardBody","Formik","initialValues","onSubmit","values","console","log","filed","field","departmentName","english_name","departmentEnglishName","user_id","then","res","catch","err","_ref2","handleSubmit","setFieldValue","setFieldTouched","handleChange","handleBlur","errors","touched","isSubmitting","Form","Row","Colxx","xxs","FormGroup","Label","Button"],"sourceRoot":""}