{"version":3,"file":"static/js/premissions.8f71712a.chunk.js","mappings":"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","sources":["containers/form-validations/FormikFields.js","views/app/group/group-premissions.js"],"sourcesContent":["import React from 'react';\nimport Select from 'react-select';\nimport { CustomInput } from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\n\nimport TagsInput from 'react-tagsinput';\nimport 'react-tagsinput/react-tagsinput.css';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\n\nimport DatePicker from 'react-multi-date-picker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Input } from 'antd';\n\nconst FormikReactSelect = ({\n  name,\n  value,\n  options,\n  isMulti,\n  className,\n  onChange,\n  onBlur,\n  onClick,\n  defaultValue,\n  isDisabled,\n  isLoading,\n  isClearable,\n  isRtl,\n  isSearchable,\n  placeholder,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <Select\n      className={`react-select ${className}`}\n      classNamePrefix=\"react-select\"\n      placeholder={\n        placeholder || <IntlMessages id=\"forms.EducationLevelDefaultValue\" />\n      }\n      options={options}\n      isMulti={isMulti}\n      initial\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={value}\n      defaultValue={defaultValue}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      isClearable={isClearable}\n      isRtl={isRtl}\n      isSearchable={isSearchable}\n    />\n  );\n};\n\nconst FormikCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              name={name}\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value.includes(child.value)}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            id={`${name}_${child.value}_${index}`}\n            type=\"checkbox\"\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value.includes(child.value)}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCheckbox = ({ name, value, disabled, label, onChange, onBlur }) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <div className=\"position-relative form-check form-check-inline\">\n      <input\n        name={name}\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        checked={value}\n        disabled={disabled}\n      />\n      <label className=\"form-check-label\">{label}</label>\n    </div>\n  );\n};\n\nconst FormikCustomCheckbox = ({\n  name,\n  value,\n  disabled,\n  label,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <CustomInput\n      type=\"checkbox\"\n      id={name}\n      name={name}\n      label={label}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      checked={value}\n      disabled={disabled}\n      inline\n    />\n  );\n};\n\nconst FormikRadioButtonGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              id={child.value}\n              name={name}\n              type=\"radio\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value === child.value}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomRadioGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            type=\"radio\"\n            id={`${name}_${child.value}_${index}`}\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value === child.value}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikTagsInput = ({ name, value, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return <TagsInput name={name} value={value} onChange={handleChange} />;\n};\n\nconst FormikInputText = ({ name, value, onChange, onBlur, ...otherProps }) => {\n  // const handleChange = (val) => {\n  //   onBlur(name, true);\n  //   onChange(name, val);\n  // };\n  return (\n    <Input\n      name={name}\n      value={value}\n      onChange={onChange}\n      style={{ height: 48, borderRadius: 0 }}\n      {...otherProps}\n    />\n  );\n};\n\nconst FormikSwitch = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return (\n    <Switch\n      name={name}\n      className={className}\n      checked={value}\n      onChange={handleChange}\n    />\n  );\n};\n\nconst FormikDatePicker = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = (_val) => {\n    onBlur(name, true);\n  };\n\n  return (\n    <DatePicker\n      name={name}\n      className={className}\n      selected={value}\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n\nexport {\n  FormikReactSelect,\n  FormikCheckboxGroup,\n  FormikCustomCheckboxGroup,\n  FormikCheckbox,\n  FormikCustomCheckbox,\n  FormikRadioButtonGroup,\n  FormikCustomRadioGroup,\n  FormikTagsInput,\n  FormikInputText,\n  FormikSwitch,\n  FormikDatePicker,\n};\n","import React, { useState } from 'react';\nimport { Formik, Form } from 'formik';\n\nimport * as Yup from 'yup';\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\nimport DualListBox from 'react-dual-listbox';\nimport './group-premission.css';\n\nimport {\n  Row,\n  Card,\n  CardBody,\n  // Form,\n  FormGroup,\n  Label,\n  Button,\n} from 'reactstrap';\n\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport { FormikReactSelect } from 'containers/form-validations/FormikFields';\n\nconst groupPremissionOptions = [\n  { value: 'Super Admin', label: 'Super Admin' },\n  { value: 'Admin', label: 'Admin' },\n  { value: 'Institute', label: 'Institute' },\n  { value: 'Teacher', label: 'Teacher' },\n  { value: 'Student', label: 'Student' },\n  { value: 'Hr', label: 'Hr' },\n];\n\nconst ValidationSchema = Yup.object().shape({\n  groupName: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"group.groupNameErr\" />),\n});\n\nconst GroupPremissions = () => {\n  const [isNext, setIsNext] = useState(false);\n  const [isSecondPage, setIsSecondPage] = useState(false);\n  const [GroupName, setGroupName] = useState('');\n  const [selected, setSelected] = useState([]);\n\n  // API Should be Called and Selected is the Assigned Premissions.\n  console.log(selected, 'Selected');\n\n  const onRegisterFirstPage = (values, { resetForm }) => {\n    console.log(values, 'Value');\n    setIsSecondPage(true);\n  };\n\n  const options = [\n    { value: 'phobos', label: 'Phobos' },\n    { value: 'deimos', label: 'Deimos' },\n    { value: 'io', label: 'Io' },\n    { value: 'ganymede', label: 'Ganymede' },\n    { value: 'One', label: 'Callisto' },\n    { value: 'Two', label: 'Callisto' },\n    { value: 'Three', label: 'Callisto' },\n  ];\n\n  // const onChange = (data) => {\n  //   setAvailableData(data.availableData);\n  //   setSelectedData(data.selectedData);\n  //   setAllSelected(data.allSelected);\n  // };\n  let fields = { text: 'Name' };\n  return (\n    <>\n      <Card>\n        <h3 className=\"mt-5 m-5\">\n          {<IntlMessages id=\"groug.premssion.title\" />}\n        </h3>\n        <CardBody>\n          <div>\n            {!isSecondPage ? (\n              <Formik\n                initialValues={{\n                  groupName: [],\n                }}\n                onSubmit={onRegisterFirstPage}\n                validationSchema={ValidationSchema}\n              >\n                {({\n                  errors,\n                  touched,\n                  values,\n                  setFieldValue,\n                  setFieldTouched,\n                  resetForm,\n                }) => (\n                  <Form className=\"av-tooltip tooltip-label-right error-l-100\">\n                    <Row className=\"justify-content-center\">\n                      <Colxx xxs=\"8\" style={{ marginTop: '8%' }}>\n                        {/* Group Name */}\n                        <FormGroup className=\"form-group has-float-label\">\n                          <Label>\n                            <IntlMessages id=\"group.groupName\" />\n                          </Label>\n                          <FormikReactSelect\n                            name=\"groupName\"\n                            id=\"groupName\"\n                            value={values.groupName}\n                            options={groupPremissionOptions}\n                            onChange={setFieldValue}\n                            onBlur={setFieldTouched}\n                            onClick={setGroupName(values.groupName)}\n                          />\n                          {errors.groupName && touched.groupName ? (\n                            <div className=\"invalid-feedback d-block bg-danger text-white\">\n                              {errors.groupName}\n                            </div>\n                          ) : null}\n                        </FormGroup>\n                      </Colxx>\n                    </Row>\n                    <Row>\n                      {' '}\n                      <Colxx\n                        xxs=\"10\"\n                        style={{\n                          marginLeft: '3%',\n                          marginTop: '5%',\n                          marginBottom: '12%',\n                        }}\n                      >\n                        <Button\n                          className=\"float-right m-4 \"\n                          size=\"lg\"\n                          type=\"submit\"\n                          color=\"primary\"\n                        >\n                          <IntlMessages id=\"forms.SubimssionButton\" />\n                        </Button>\n                      </Colxx>\n                    </Row>\n                  </Form>\n                )}\n              </Formik>\n            ) : (\n              <>\n                {!isNext ? (\n                  <>\n                    <Row className=\"justify-content-center  border m-5 \">\n                      <Colxx xxs=\"9\">\n                        <h1 className=\"float-right m-2\">\n                          {' '}\n                          GroupName: {GroupName.value}\n                        </h1>\n                      </Colxx>\n                    </Row>\n                    <Row className=\"m-5\">\n                      <Colxx>\n                        {' '}\n                        <DualListBox\n                          style={{\n                            backgroundColor: 'blue !important',\n                            borderRadius: '15px !important',\n                          }}\n                          alignActions=\"top\"\n                          canFilter\n                          options={options}\n                          selected={selected}\n                          onChange={(value) => setSelected(value)}\n                          className=\"dualbox\"\n                        />\n                      </Colxx>\n                    </Row>\n                    <Row>\n                      <Colxx style={{ marginLeft: '6%', marginBottom: '10%' }}>\n                        <div className=\"d-flex justify-content-between align-items-center m-4 float-right\">\n                          <Button\n                            size=\"lg\"\n                            type=\"submit\"\n                            onClick={() => setIsNext(true)}\n                          >\n                            <IntlMessages id=\"button.SubmitButton\" />\n                          </Button>\n                        </div>\n                      </Colxx>\n                    </Row>\n                  </>\n                ) : (\n                  <div\n                    className=\"wizard-basic-step text-center pt-3 \"\n                    style={{ minHeight: '400px' }}\n                  >\n                    <div>\n                      <h1 className=\"mb-2\">\n                        <IntlMessages id=\"wizard.content-thanks\" />\n                      </h1>\n                      <h3>\n                        <IntlMessages id=\"wizard.registered\" />\n                      </h3>\n                      <Button\n                        className=\"m-5 bg-primary\"\n                        onClick={() => {\n                          setIsSecondPage(false);\n                          setIsNext(false);\n                        }}\n                      >\n                        <IntlMessages id=\"button.back\" />\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\nexport default GroupPremissions;\n"],"names":["FormikReactSelect","_ref","name","value","options","isMulti","className","onChange","onBlur","defaultValue","onClick","isDisabled","isLoading","isClearable","isRtl","isSearchable","placeholder","_jsx","Select","concat","classNamePrefix","IntlMessages","id","initial","val","FormikInputText","_ref9","otherProps","_objectWithoutProperties","_excluded","Input","_objectSpread","style","height","borderRadius","FormikDatePicker","_ref11","DatePicker","selected","_val","groupPremissionOptions","label","ValidationSchema","Yup","shape","groupName","required","nullable","_useState","useState","_useState2","_slicedToArray","isNext","setIsNext","_useState3","_useState4","isSecondPage","setIsSecondPage","_useState5","_useState6","GroupName","setGroupName","_useState7","_useState8","setSelected","console","log","_Fragment","children","_jsxs","Card","CardBody","minHeight","Button","Row","Colxx","xxs","DualListBox","backgroundColor","alignActions","canFilter","marginLeft","marginBottom","size","type","Formik","initialValues","onSubmit","values","resetForm","validationSchema","_ref2","errors","touched","setFieldValue","setFieldTouched","Form","marginTop","FormGroup","Label","color"],"sourceRoot":""}