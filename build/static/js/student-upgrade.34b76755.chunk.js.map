{"version":3,"sources":["views/app/students/student-upgrade.js","views/app/students/students-class-status-upgrade.js","views/app/students/marks-status-checked-students.js","helpers/currentUser.js"],"names":["ValidationSchema","Yup","shape","institute","value","required","nullable","_jsx","IntlMessages","id","educationlaYear","studyTime","classs","department","StudentUpgrade","_ref","match","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","isNext","setIsNext","_useState5","_useState6","setFields","_useState7","_useState8","institutes","setInstitutes","_useState9","_useState10","departments","setDepartments","_useState11","_useState12","classes","setClasses","_useState13","_useState14","setSubjects","_useState15","_useState16","students","setStudents","_useState17","_useState18","header","setHeader","_useState19","_useState20","selectedInstitute","setSelectedInstitute","_useState21","_useState22","selectedDepartment","setSelectedDepartment","_useState23","_useState24","selectedClass","setSelectedClass","_useState25","_useState26","_useState27","_useState28","selecedStudyTime","setSelectedStudyTime","_useState29","_useState30","selectedEducationalYear","setSelectedEducationalYear","_useState31","_useState32","_useState33","_useState34","_useState35","_useState36","_useState37","_useState38","checkedItems","setCheckedItems","_useState39","_useState40","setClasss","_useState41","_useState42","semester","setSemester","_useState43","_useState44","section","setSection","fetchInstitutes","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","updatedData","wrap","_context","prev","next","callApi","sent","data","status","map","item","label","name","console","log","stop","apply","arguments","fetchFields","_ref3","_callee2","_context2","fetchDepartments","_ref4","_callee3","_context3","fetchClasses","_ref5","_callee4","_context4","fetchSubjects","_ref6","_callee5","_context5","useEffect","fetchStudents","_ref7","_callee6","event","classArray","_context6","concat","split","_x","_useState45","_useState46","setIsMasterChecked","Object","values","every","Boolean","_useState47","_useState48","_Fragment","children","_jsxs","Card","className","CardBody","Formik","initialValues","validationSchema","onSubmit","_ref8","errors","touched","setFieldTouched","setFieldValue","Form","Row","Colxx","xxs","FormGroup","Label","FormikReactSelect","options","onChange","onBlur","onClick","studyTimeOptions","Field","type","Button","color","size","style","marginInline","maxWidth","maxHeight","overflowX","overflowY","passedStudents","checkedItemsObj","_objectSpread","fillteredStudents","student","index","filter","undefined","class_id","study_time","department_id","educational_year","user_id","currentUser","_ref9","striped","colspan","length","studentRow","secondIndex","scope","score","CustomInput","_defineProperty","header1","StudentClassStatusUpgrade","reload","setReload","createNotification","cName","NotificationManager","success","error","alert","info","_callee7","_context7","shift","verification_result","_x2","_ref10","submitInitialValues","MarskStatusCheckedStudents","_useContext","useContext","AuthContext","isSubmitted","setIsSubmitted","selectedSemester","setSelectedSemester","useParams","markId","instituteId","abrupt","fechtStudents","semesterId","educationalYear","departmentId","newStudents","student_id","class_grade","_toConsumableArray","fontSize","fontWeight","height","class","textAlign","father_name","margin","sectionValueOptions","classOptions","semesterValueOptions","user","JSON","parse","localStorage","getItem"],"mappings":"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","file":"static/js/student-upgrade.34b76755.chunk.js","sourcesContent":["// this page is for student upgrade, it is not used in the project, it might be used in the future\n\nimport React, { useState, useEffect } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport axios from 'axios';\nimport { studyTimeOptions } from '../../app/global-data/options';\n// Year  and SHift\n\nimport * as Yup from 'yup';\nimport {\n  Row,\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Button,\n  CustomInput,\n  CardTitle,\n  Input,\n} from 'reactstrap';\nimport Select from 'react-select';\n\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport {\n  FormikReactSelect,\n  FormikTagsInput,\n  FormikDatePicker,\n} from 'containers/form-validations/FormikFields';\nimport userEvent from '@testing-library/user-event';\n\nimport currentUser from 'helpers/currentUser';\nimport callApi from 'helpers/callApi';\n\nconst ValidationSchema = Yup.object().shape({\n  institute: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.InstituteErr\" />),\n\n  educationlaYear: Yup.string().required(\n    <IntlMessages id=\"forms.educationYearErr\" />\n  ),\n\n  studyTime: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.StudyTimeErr\" />),\n\n  classs: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"marks.ClassErr\" />),\n\n  department: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"teacher.departmentIdErr\" />),\n});\n\nconst StudentUpgrade = ({ match }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isNext, setIsNext] = useState(true);\n  const [fields, setFields] = useState([]);\n  const [institutes, setInstitutes] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [classes, setClasses] = useState([]);\n  const [subjects, setSubjects] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [header, setHeader] = useState([]);\n  const [selectedInstitute, setSelectedInstitute] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [selecedStudyTime, setSelectedStudyTime] = useState('');\n  const [selectedEducationalYear, setSelectedEducationalYear] = useState('');\n  const [passingScore, setPassingScore] = useState(55);\n  const [subjectGrad, setSubjectGrad] = useState();\n  const [subjectGPA, setSubjectGPA] = useState();\n  const [checkedItems, setCheckedItems] = useState({});\n\n  const [classs, setClasss] = useState();\n  const [semester, setSemester] = useState();\n  const [section, setSection] = useState();\n\n  const fetchInstitutes = async () => {\n    const response = await callApi('institute/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setInstitutes(updatedData);\n    } else {\n      console.log('institute error');\n    }\n  };\n  const fetchFields = async () => {\n    const response = await callApi('institute/field/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setFields(updatedData);\n    } else {\n      console.log('field error');\n    }\n  };\n  const fetchDepartments = async () => {\n    const response = await callApi('institute/department/', '', null);\n    console.log('response of department', response);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setDepartments(updatedData);\n    } else {\n      console.log('department error');\n    }\n  };\n\n  const fetchClasses = async () => {\n    const response = await callApi('institute/classs/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name + ' - ' + item.semester + ' - ' + item.section,\n      }));\n      setClasses(updatedData);\n    } else {\n      console.log('class error');\n    }\n  };\n\n  const fetchSubjects = async () => {\n    const response = await callApi('institute/subject/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setSubjects(updatedData);\n    } else {\n      console.log('subject error');\n    }\n  };\n\n  useEffect(() => {\n    fetchInstitutes();\n    fetchFields();\n    fetchDepartments();\n    fetchClasses();\n    fetchSubjects();\n  }, []);\n\n  const fetchStudents = async (event) => {\n    setIsNext(false);\n\n    const response = await callApi(\n      `api/class_marks?institute=${selectedInstitute.value}&classs=${selectedClass.value}&shift=${selecedStudyTime.value}&department=${selectedDepartment.value}&educational_year=${selectedEducationalYear}`,\n      '',\n      null\n    );\n    if (response.data && response.status === 200) {\n      setStudents(response.data);\n      setHeader(response.data[0]);\n\n      console.log('response.data ', response.data);\n\n      // split selected class to get semester and section\n      const classArray = selectedClass.label.split(' - ');\n      setClasss(classArray[0]);\n      setSemester(classArray[1]);\n      setSection(classArray[2]);\n    } else {\n      console.log('students error');\n    }\n  };\n  const handleChange = (event, index) => {\n    const { name, checked } = event.target;\n    setCheckedItems((prevState) => {\n      const newCheckedItems = [...prevState];\n      newCheckedItems[index] = checked;\n      return newCheckedItems;\n    });\n  };\n\n  const onSubmit = (values) => {\n    const checkedItemsObj = { ...checkedItems };\n    // if the index is in the checkedItemsObj, if it is, add the student to the passedStudents array,\n    const passedStudents = students.map((student, index) => {\n      if (checkedItemsObj[index]) {\n        // only returns first index of the student, becuase we only need the student id\n        return student[0].name;\n      }\n    });\n    //remove undefined values from the passedStudents array\n    const fillteredStudents = passedStudents.filter(\n      (student) => student !== undefined && student !== null\n    );\n\n    const data = [\n      {\n        class_id: selectedClass.value,\n        study_time: selecedStudyTime.value,\n        department_id: selectedDepartment.value,\n        educational_year: selectedEducationalYear,\n        user_id: currentUser(),\n      },\n      { ...fillteredStudents },\n    ];\n\n    const response = callApi('api/class_marks', 'POST', data);\n    if (\n      response.status === 200 ||\n      response.status === 201 ||\n      response.status === 202 ||\n      response.status === 203\n    ) {\n      console.log('response.data', response.data);\n    } else {\n      console.log('error');\n    }\n  };\n\n  const initialValues = {\n    institute: [],\n    educationlaYear: '',\n    studyTime: [],\n    classs: [],\n    department: [],\n  };\n  const secondFormInitialValues = {\n    passedStudents: [],\n  };\n\n  // //Check Box\n  // const [checkedItems, setCheckedItems] = useState(\n  //   students.reduce((acc, student, index) => ({ ...acc, [index]: false }), {})\n  // );\n  const [isMasterChecked, setIsMasterChecked] = useState(false);\n\n  const handleMasterCheckboxChange = (event) => {\n    const isChecked = event.target.checked;\n    const updatedCheckedItems = Object.keys(checkedItems).reduce(\n      (acc, index) => ({ ...acc, [index]: isChecked }),\n      {}\n    );\n    setCheckedItems(updatedCheckedItems);\n    setIsMasterChecked(isChecked);\n  };\n\n  // const handleMasterCheckboxChange = (event) => {\n  //   const isChecked = event.target.checked;\n  //   const updatedCheckedItems = Object.keys(checkedItems).reduce(\n  //     (acc, studentId) => ({ ...acc, [studentId]: { checked: isChecked } }),\n  //     {}\n  //   );\n  //   setCheckedItems(updatedCheckedItems);\n  //   setIsMasterChecked(isChecked);\n  // };\n\n  useEffect(() => {\n    setIsMasterChecked(Object.values(checkedItems).every(Boolean));\n  }, [checkedItems]);\n\n  const [checkedIndexes, setCheckedIndexes] = useState([]);\n\n  const handleCheckboxChange = (index) => {\n    console.log('indexsdfsd', index);\n    // check if the index is already in the array\n    if (checkedIndexes.includes(index)) {\n      // if it is, remove it from the array\n      setCheckedIndexes(checkedIndexes.filter((i) => i !== index));\n      console.log('checkedIndexes reomved', checkedIndexes);\n    } else {\n      // if it's not, add it to the array\n      setCheckedIndexes([...checkedIndexes, index]);\n      console.log('checkedIndexes added', checkedIndexes);\n    }\n  };\n\n  const getSelectedStudents = () => {\n    const arrayLength = Array(students.map((student) => student));\n\n    // cleanedStudents.shift();\n    console.log('arrayLength', arrayLength);\n    console.log('checkedIndesdfxes', checkedIndexes);\n    // filter the students array based on the checkedIndexes array\n    const selectedStudents = students.filter((student, index) =>\n      checkedIndexes.includes(index)\n    );\n    // return the selected students\n    // return selectedStudents;\n    console.log('selectedStudents', selectedStudents);\n  };\n\n  // const checkedIndexes = Object.keys(checkedItems)\n  //   .filter((index) => checkedItems[index])\n  //   .map((index) => parseInt(index));\n\n  return (\n    <>\n      <Card>\n        <h3 className=\"mt-5 m-5\">\n          {<IntlMessages id=\"marks.marksDisplayTitle\" />}\n        </h3>\n        <CardBody>\n          {isNext ? (\n            <Formik\n              initialValues={initialValues}\n              validationSchema={ValidationSchema}\n              onSubmit={fetchStudents}\n            >\n              {({\n                errors,\n                touched,\n                values,\n                setFieldTouched,\n                setFieldValue,\n              }) => (\n                <Form className=\"av-tooltip tooltip-label-right \">\n                  <Row className=\"m-5\">\n                    <Colxx xxs=\"6\">\n                      {/* set if condition, if institutes are loaded */}\n                      <FormGroup className=\"form-group has-float-label error-l-150 \">\n                        <Label>\n                          <IntlMessages id=\"forms.InstituteLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"institute\"\n                          id=\"institute\"\n                          value={values.institute}\n                          options={institutes}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedInstitute(values.institute)}\n                        />\n\n                        {errors.institute && touched.institute ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.institute}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5  error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.StudyTimeLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"studyTime\"\n                          id=\"studyTime\"\n                          value={values.studyTime}\n                          options={studyTimeOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedStudyTime(values.studyTime)}\n                        />\n                        {errors.studyTime && touched.studyTime ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.studyTime}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.educationYearLabel\" />\n                        </Label>\n                        <Field\n                          type=\"number\"\n                          id=\"educationlaYear\"\n                          className=\"form-control\"\n                          name=\"educationlaYear\"\n                          // assign value to selectedEducationalYear\n                          onClick={setSelectedEducationalYear(\n                            values.educationlaYear\n                          )}\n                        />\n                        {errors.educationlaYear && touched.educationlaYear ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.educationlaYear}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n\n                    <Colxx xxs=\"6\">\n                      <FormGroup className=\"form-group has-float-label error-l-150 \">\n                        <Label>\n                          <IntlMessages id=\"marks.ClassLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"classs\"\n                          id=\"classs\"\n                          value={values.classs}\n                          options={classes}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedClass(values.classs)}\n                          required\n                        />\n                        {errors.classs && touched.classs ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.classs}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.studyDepartment\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"department\"\n                          id=\"department\"\n                          value={values.department}\n                          options={departments}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedDepartment(values.department)}\n                          required\n                        />\n                        {errors.department && touched.department ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.department}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n                  </Row>\n                  <Row>\n                    <Colxx>\n                      <Button\n                        color=\"primary\"\n                        className=\"float-right m-5\"\n                        size=\"lg\"\n                        type=\"submit\"\n                        // onClick={() => {\n                        //   handleClick(false);\n                        // }}\n                      >\n                        <span className=\"spinner d-inline-block\">\n                          <span className=\"bounce1\" />\n                          <span className=\"bounce2\" />\n                          <span className=\"bounce3\" />\n                        </span>\n                        <span className=\"label\">\n                          <IntlMessages id=\"button.Next\" />\n                        </span>\n                      </Button>\n                    </Colxx>\n                  </Row>\n                </Form>\n              )}\n            </Formik>\n          ) : (\n            <>\n              {/* Result of Search */}\n              <Row\n                className=\"border border bg-primary me-5 p-1 \"\n                style={{ marginInline: '2%' }}\n              >\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"forms.FieldLabel\" />\n                  </Label>\n                  <h6>{selectedDepartment.label}</h6>\n                </Colxx>\n\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"marks.ClassLabel\" />\n                  </Label>\n                  <h6>{classs}</h6>\n                </Colxx>\n\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"forms.StudyTimeLabel\" />\n                  </Label>\n                  <h6>{selecedStudyTime.label}</h6>\n                </Colxx>\n\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"marks.SemesterLabel\" />\n                  </Label>\n                  <h6>{semester}</h6>\n                </Colxx>\n\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"marks.SectionLabel\" />\n                  </Label>\n                  <h6>{section}</h6>\n                </Colxx>\n              </Row>\n              <Row\n                style={{\n                  marginInline: '2%',\n                  maxWidth: '97%',\n                  maxHeight: '900px',\n                  overflowX: 'auto',\n                  overflowY: 'auto',\n                }}\n              >\n                <Formik\n                  initialValues={secondFormInitialValues}\n                  onSubmit={onSubmit}\n                  // validationSchema={ValidationSchema}\n                >\n                  {({ errors }) => (\n                    <Form className=\"table\" striped>\n                      <Row>\n                        <table className=\"table\" striped>\n                          <thead\n                            className=\"thead-dark \"\n                            style={{ marginInline: '2%' }}\n                          >\n                            <tr>\n                              <th colspan=\"3\" className=\"border text-center\">\n                                <IntlMessages id=\"marks.studentChar\" />\n                              </th>\n                              <th\n                                colspan={header.length - 3}\n                                className=\"border text-center\"\n                              >\n                                <IntlMessages id=\"marks.marksDisplayTitle\" />\n                              </th>{' '}\n                              <th className=\"border text-center\">\n                                <IntlMessages id=\"marks.resultHeader\" />\n                              </th>\n                            </tr>\n                          </thead>\n                          <thead\n                            className=\"thead-dark border  text-center\"\n                            style={{ marginInline: '5%' }}\n                          >\n                            <tr>\n                              {header.map((item, index) => (\n                                <th key={index} className=\"border  text-center\">\n                                  {item.name}\n                                </th>\n                              ))}\n                              <th className=\"border text-center\">\n                                {/* <CustomInput\n                                  type=\"checkbox\"\n                                  id=\"CheckAll\"\n                                  checked={isMasterChecked}\n                                  onChange={handleMasterCheckboxChange}\n                                /> */}\n                              </th>\n                            </tr>\n                          </thead>\n\n                          <tbody\n                            className=\"border border \"\n                            style={{\n                              maxHeight: '500px',\n                              overflowY: 'scroll',\n                              overflowX: 'hidden',\n                            }}\n                          >\n                            {students.map((studentRow, index) => {\n                              return (\n                                <tr key={index}>\n                                  {!index == 0 ? (\n                                    <>\n                                      {studentRow.map(\n                                        (student, secondIndex) => {\n                                          return (\n                                            <>\n                                              {secondIndex === 0 ||\n                                              secondIndex === 1 ||\n                                              secondIndex === 2 ? (\n                                                <>\n                                                  <td\n                                                    scope=\"col\"\n                                                    className=\"border text-center \"\n                                                  >\n                                                    {student.name}\n                                                  </td>\n                                                </>\n                                              ) : (\n                                                <td\n                                                  scope=\"col\"\n                                                  className=\"border text-center \"\n                                                >\n                                                  {student.score}\n                                                </td>\n                                              )}\n                                            </>\n                                          );\n                                        }\n                                      )}\n                                      <td\n                                        className=\"border text-center d-flex justify-content-center\"\n                                        key={index}\n                                      >\n                                        <CustomInput\n                                          type=\"radio\"\n                                          id={`name${index}`}\n                                          name={`radio${index}`}\n                                          value={index}\n                                          // checked={checkedIndexes.includes(\n                                          //   index\n                                          // )}\n                                          onChange={() =>\n                                            setCheckedItems({\n                                              ...checkedItems,\n                                              [index]: !checkedItems[index],\n                                            })\n                                          }\n                                        />\n                                        <CustomInput\n                                          type=\"radio\"\n                                          id={`name${index} + 1`}\n                                          name={`radio${index}`}\n                                          value={index}\n                                          // checked={checkedIndexes.includes(\n                                          //   index\n                                          // )}\n                                          onChange={() =>\n                                            setCheckedItems({\n                                              ...checkedItems,\n                                              [index]: !checkedItems[index],\n                                            })\n                                          }\n                                        />\n                                        <CustomInput\n                                          type=\"radio\"\n                                          id={`name${index} + 2`}\n                                          name={`radio${index}`}\n                                          value={index}\n                                          // checked={checkedIndexes.includes(\n                                          //   index\n                                          // )}\n                                          onChange={() =>\n                                            setCheckedItems({\n                                              ...checkedItems,\n                                              [index]: !checkedItems[index],\n                                            })\n                                          }\n                                        />\n                                      </td>\n                                    </>\n                                  ) : null}\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n\n                          <tfoot\n                            className=\"thead-dark\"\n                            style={{ marginInline: '5%' }}\n                          >\n                            <tr>\n                              {header.map((header1, index) => (\n                                <th key={index} className=\"border  text-center\">\n                                  {header1.name}\n                                </th>\n                              ))}\n                              <th className=\"border text-center\">\n                                <IntlMessages id=\"marks.resultHeader\" />\n                              </th>\n                            </tr>\n                          </tfoot>\n                        </table>\n                      </Row>\n                      <Row className=\" justify-content-center\">\n                        <Colxx xxs=\"9\" className=\"m-5\">\n                          <Button\n                            className=\" m-4\"\n                            onClick={() => setIsNext(true)}\n                          >\n                            <IntlMessages id=\"button.Back\" />\n                          </Button>\n                        </Colxx>\n                        <div className=\"d-flex justify-content-between align-items-center m-4 float-right\">\n                          <Button\n                            size=\"lg\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            // onClick={() => getSelectedStudents()}\n                          >\n                            <IntlMessages id=\"button.SubmitButton\" />\n                          </Button>\n                        </div>\n                      </Row>\n                    </Form>\n                  )}\n                </Formik>\n              </Row>\n            </>\n          )}\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default StudentUpgrade;\n","// this is the page where admin can upgrade students exam status to send level which means that student all marks have uploaded, after giveing all subjects exams and if they pass the exam then they can upgrade this status to next level\n\nimport React, { useState, useEffect } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { studyTimeOptions } from '../global-data/options';\nimport './../../../assets/css/global-style.css';\nimport { NotificationManager } from 'components/common/react-notifications';\n\n// Year  and SHift\n\nimport * as Yup from 'yup';\nimport {\n  Row,\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Button,\n  CustomInput,\n  CardTitle,\n  Input,\n} from 'reactstrap';\nimport Select from 'react-select';\n\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport {\n  FormikReactSelect,\n  FormikTagsInput,\n  FormikDatePicker,\n} from 'containers/form-validations/FormikFields';\nimport userEvent from '@testing-library/user-event';\n\nimport currentUser from 'helpers/currentUser';\nimport callApi from 'helpers/callApi';\n\nconst ValidationSchema = Yup.object().shape({\n  institute: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.InstituteErr\" />),\n\n  educationlaYear: Yup.string().required(\n    <IntlMessages id=\"forms.educationYearErr\" />\n  ),\n\n  studyTime: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.StudyTimeErr\" />),\n\n  classs: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"marks.ClassErr\" />),\n\n  department: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"teacher.departmentIdErr\" />),\n});\n\nconst StudentClassStatusUpgrade = ({ match }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isNext, setIsNext] = useState(false);\n  const [fields, setFields] = useState([]);\n  const [institutes, setInstitutes] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [classes, setClasses] = useState([]);\n  const [subjects, setSubjects] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [header, setHeader] = useState([]);\n  const [selectedInstitute, setSelectedInstitute] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [selecedStudyTime, setSelectedStudyTime] = useState('');\n  const [selectedEducationalYear, setSelectedEducationalYear] = useState('');\n  const [passingScore, setPassingScore] = useState(55);\n  const [subjectGrad, setSubjectGrad] = useState();\n  const [reload, setReload] = useState();\n  const [checkedItems, setCheckedItems] = useState({});\n\n  const [classs, setClasss] = useState();\n  const [semester, setSemester] = useState();\n  const [section, setSection] = useState();\n\n  const fetchInstitutes = async () => {\n    const response = await callApi('institute/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setInstitutes(updatedData);\n    } else {\n      console.log('institute error');\n    }\n  };\n\n  const fetchFields = async () => {\n    const response = await callApi('institute/field/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setFields(updatedData);\n    } else {\n      console.log('field error');\n    }\n  };\n\n  const fetchDepartments = async () => {\n    const response = await callApi('institute/department/', '', null);\n    console.log('response of department', response);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setDepartments(updatedData);\n    } else {\n      console.log('department error');\n    }\n  };\n\n  const fetchClasses = async () => {\n    const response = await callApi('institute/classs/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name + ' - ' + item.semester + ' - ' + item.section,\n      }));\n      setClasses(updatedData);\n    } else {\n      console.log('class error');\n    }\n  };\n\n  const fetchSubjects = async () => {\n    const response = await callApi('institute/subject/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setSubjects(updatedData);\n    } else {\n      console.log('subject error');\n    }\n  };\n\n  useEffect(() => {\n    fetchInstitutes();\n    fetchFields();\n    fetchDepartments();\n    fetchClasses();\n    fetchSubjects();\n  }, []);\n\n  const fetchStudents = async (event) => {\n    const response = await callApi(\n      `students/class_marks?institute=${selectedInstitute.value}&classs=${selectedClass.value}&shift=${selecedStudyTime.value}&department=${selectedDepartment.value}&educational_year=${selectedEducationalYear}&upgrade=1`,\n      '',\n      null\n    );\n    if (response.data && response.status === 200) {\n      setIsNext(true);\n      setStudents(response.data);\n      setHeader(response.data[0]);\n\n      console.log('response.data ', response.data);\n\n      // split selected class to get semester and section\n      const classArray = selectedClass.label.split(' - ');\n      setClasss(classArray[0]);\n      setSemester(classArray[1]);\n      setSection(classArray[2]);\n    } else {\n      console.log('students error');\n    }\n  };\n  const handleChange = (event, index) => {\n    const { name, checked } = event.target;\n    setCheckedItems((prevState) => {\n      const newCheckedItems = [...prevState];\n      newCheckedItems[index] = checked;\n      return newCheckedItems;\n    });\n  };\n\n  const createNotification = (type, className) => {\n    const cName = className || '';\n    switch (type) {\n      case 'success':\n        NotificationManager.success(\n          'شاگردانو نمری تاید شوی',\n          'موفقیت',\n          3000,\n          null,\n          null,\n          cName\n        );\n        break;\n      case 'error':\n        NotificationManager.error(\n          'نمری تاید نشوی, بیا کوشش وکری',\n          'خطا',\n          9000,\n          () => {\n            alert('callback');\n          },\n          null,\n          cName\n        );\n        break;\n      default:\n        NotificationManager.info('Info message');\n        break;\n    }\n  };\n\n  const onSubmit = async (values) => {\n    const data = [\n      {\n        institute: selectedInstitute.value,\n        classs: selectedClass.value,\n        shift: selecedStudyTime.value,\n        department: selectedDepartment.value,\n        educational_year: selectedEducationalYear,\n        verification_result: 'verified',\n      },\n      { students: students },\n    ];\n    console.log('data', data);\n\n    const response = await callApi(\n      'students/students-class-status-upgrade/',\n      'POST',\n      data\n    );\n    if (response.data && response.status === 200) {\n      console.log('response.data', response.data);\n      createNotification('success', 'filled');\n      setReload(false);\n      setIsNext(false);\n      setStudents([]);\n    } else {\n      createNotification('error', 'filled');\n\n      console.log('students error');\n    }\n  };\n\n  const initialValues = {\n    institute: [],\n    educationlaYear: '',\n    studyTime: [],\n    classs: [],\n    department: [],\n  };\n  const secondFormInitialValues = {\n    passedStudents: [],\n  };\n\n  const [isMasterChecked, setIsMasterChecked] = useState(false);\n\n  const handleMasterCheckboxChange = (event) => {\n    const isChecked = event.target.checked;\n    const updatedCheckedItems = Object.keys(checkedItems).reduce(\n      (acc, index) => ({ ...acc, [index]: isChecked }),\n      {}\n    );\n    setCheckedItems(updatedCheckedItems);\n    setIsMasterChecked(isChecked);\n  };\n\n  // const handleMasterCheckboxChange = (event) => {\n  //   const isChecked = event.target.checked;\n  //   const updatedCheckedItems = Object.keys(checkedItems).reduce(\n  //     (acc, studentId) => ({ ...acc, [studentId]: { checked: isChecked } }),\n  //     {}\n  //   );\n  //   setCheckedItems(updatedCheckedItems);\n  //   setIsMasterChecked(isChecked);\n  // };\n\n  useEffect(() => {\n    setIsMasterChecked(Object.values(checkedItems).every(Boolean));\n  }, [checkedItems]);\n\n  const [checkedIndexes, setCheckedIndexes] = useState([]);\n\n  const handleCheckboxChange = (index) => {\n    console.log('indexsdfsd', index);\n    // check if the index is already in the array\n    if (checkedIndexes.includes(index)) {\n      // if it is, remove it from the array\n      setCheckedIndexes(checkedIndexes.filter((i) => i !== index));\n      console.log('checkedIndexes reomved', checkedIndexes);\n    } else {\n      // if it's not, add it to the array\n      setCheckedIndexes([...checkedIndexes, index]);\n      console.log('checkedIndexes added', checkedIndexes);\n    }\n  };\n\n  const getSelectedStudents = () => {\n    const arrayLength = Array(students.map((student) => student));\n\n    // cleanedStudents.shift();\n    console.log('arrayLength', arrayLength);\n    console.log('checkedIndesdfxes', checkedIndexes);\n    // filter the students array based on the checkedIndexes array\n    const selectedStudents = students.filter((student, index) =>\n      checkedIndexes.includes(index)\n    );\n    // return the selected students\n    // return selectedStudents;\n    console.log('selectedStudents', selectedStudents);\n  };\n\n  return (\n    <>\n      <Card>\n        <div className=\"mt-4 ml-5\">\n          <h2 className=\" m-5  titleStyle\">\n            {<IntlMessages id=\"student.marks.completion-approval\" />}\n          </h2>\n        </div>\n        <CardBody>\n          {!reload ? (\n            <>\n              {!isNext ? (\n                <Formik\n                  initialValues={initialValues}\n                  validationSchema={ValidationSchema}\n                  onSubmit={fetchStudents}\n                >\n                  {({\n                    errors,\n                    touched,\n                    values,\n                    setFieldTouched,\n                    setFieldValue,\n                  }) => (\n                    <Form className=\"av-tooltip tooltip-label-right style \">\n                      <Row className=\"m-5\">\n                        <Colxx xxs=\"6\">\n                          {/* set if condition, if institutes are loaded */}\n                          <FormGroup className=\"form-group has-float-label error-l-150 \">\n                            <Label>\n                              <IntlMessages id=\"forms.InstituteLabel\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"institute\"\n                              id=\"institute\"\n                              value={values.institute}\n                              options={institutes}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              onClick={setSelectedInstitute(values.institute)}\n                            />\n\n                            {errors.institute && touched.institute ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.institute}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n\n                          <FormGroup className=\"form-group has-float-label mt-5  error-l-150\">\n                            <Label>\n                              <IntlMessages id=\"forms.StudyTimeLabel\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"studyTime\"\n                              id=\"studyTime\"\n                              value={values.studyTime}\n                              options={studyTimeOptions}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              onClick={setSelectedStudyTime(values.studyTime)}\n                            />\n                            {errors.studyTime && touched.studyTime ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.studyTime}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n                          <FormGroup className=\"form-group has-float-label mt-5 error-l-150 \">\n                            <Label>\n                              <IntlMessages id=\"forms.educationYearLabel\" />\n                            </Label>\n                            <Field\n                              type=\"number\"\n                              id=\"educationlaYear\"\n                              className=\"form-control fieldStyle\"\n                              name=\"educationlaYear\"\n                              // assign value to selectedEducationalYear\n                              onClick={setSelectedEducationalYear(\n                                values.educationlaYear\n                              )}\n                            />\n                            {errors.educationlaYear &&\n                            touched.educationlaYear ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.educationlaYear}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n                        </Colxx>\n\n                        <Colxx xxs=\"6\">\n                          <FormGroup className=\"form-group has-float-label error-l-150 \">\n                            <Label>\n                              <IntlMessages id=\"marks.ClassLabel\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"classs\"\n                              id=\"classs\"\n                              value={values.classs}\n                              options={classes}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              onClick={setSelectedClass(values.classs)}\n                              required\n                            />\n                            {errors.classs && touched.classs ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.classs}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n\n                          <FormGroup className=\"form-group has-float-label mt-5 error-l-150 \">\n                            <Label>\n                              <IntlMessages id=\"forms.studyDepartment\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"department\"\n                              id=\"department\"\n                              value={values.department}\n                              options={departments}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              onClick={setSelectedDepartment(values.department)}\n                              required\n                            />\n                            {errors.department && touched.department ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.department}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n                        </Colxx>\n                      </Row>\n                      <Row>\n                        <Colxx>\n                          <Button\n                            color=\"primary\"\n                            className=\"float-right m-5\"\n                            size=\"lg\"\n                            type=\"submit\"\n                            // onClick={() => {\n                            //   handleClick(false);\n                            // }}\n                          >\n                            <span className=\"spinner d-inline-block\">\n                              <span className=\"bounce1\" />\n                              <span className=\"bounce2\" />\n                              <span className=\"bounce3\" />\n                            </span>\n                            <span className=\"label\">\n                              <IntlMessages id=\"button.Next\" />\n                            </span>\n                          </Button>\n                        </Colxx>\n                      </Row>\n                    </Form>\n                  )}\n                </Formik>\n              ) : (\n                <>\n                  {/* Result of Search */}\n                  <Row\n                    className=\"border border bg-primary me-5 p-1\"\n                    style={{ marginInline: '2%' }}\n                  >\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"forms.FieldLabel\" />\n                      </Label>\n                      <h6>{selectedDepartment.label}</h6>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"marks.ClassLabel\" />\n                      </Label>\n                      <h6>{classs}</h6>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"forms.StudyTimeLabel\" />\n                      </Label>\n                      <h6>{selecedStudyTime.label}</h6>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"marks.SemesterLabel\" />\n                      </Label>\n                      <h6>{semester}</h6>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"marks.SectionLabel\" />\n                      </Label>\n                      <h6>{section}</h6>\n                    </Colxx>\n                  </Row>\n                  <Row\n                    style={{\n                      marginInline: '2%',\n                      maxWidth: '97%',\n                      maxHeight: '900px',\n                      overflowX: 'auto',\n                      overflowY: 'auto',\n                    }}\n                  >\n                    <Formik\n                      initialValues={secondFormInitialValues}\n                      onSubmit={onSubmit}\n                      // validationSchema={ValidationSchema}\n                    >\n                      {({ errors }) => (\n                        <Form className=\"table\" striped>\n                          <Row>\n                            <table className=\"table\" striped>\n                              <thead\n                                className=\"thead-dark \"\n                                style={{ marginInline: '2%' }}\n                              >\n                                <tr>\n                                  <th\n                                    colspan=\"3\"\n                                    className=\"border text-center\"\n                                  >\n                                    <IntlMessages id=\"marks.studentChar\" />\n                                  </th>\n                                  <th\n                                    colspan={header.length - 3}\n                                    className=\"border text-center\"\n                                  >\n                                    <IntlMessages id=\"marks.marksDisplayTitle\" />\n                                  </th>{' '}\n                                  {/* <th className=\"border text-center\">\n                                <IntlMessages id=\"marks.resultHeader\" />\n                              </th> */}\n                                </tr>\n                              </thead>\n                              <thead\n                                className=\"thead-dark border  text-center\"\n                                style={{ marginInline: '5%' }}\n                              >\n                                <tr>\n                                  {header.map((item, index) => (\n                                    <th\n                                      key={index}\n                                      className=\"border  text-center\"\n                                    >\n                                      {item.name}\n                                    </th>\n                                  ))}\n                                </tr>\n                              </thead>\n\n                              <tbody\n                                className=\"border border \"\n                                style={{\n                                  maxHeight: '500px',\n                                  overflowY: 'scroll',\n                                  overflowX: 'hidden',\n                                }}\n                              >\n                                {students.map((studentRow, index) => {\n                                  return (\n                                    <tr key={index}>\n                                      {!index == 0 ? (\n                                        <>\n                                          {studentRow.map(\n                                            (student, secondIndex) => {\n                                              return (\n                                                <>\n                                                  {secondIndex === 0 ||\n                                                  secondIndex === 1 ||\n                                                  secondIndex === 2 ? (\n                                                    <td\n                                                      scope=\"col\"\n                                                      className=\"border text-center \"\n                                                    >\n                                                      {student.name}\n                                                    </td>\n                                                  ) : (\n                                                    <td\n                                                      scope=\"col\"\n                                                      className=\"border text-center \"\n                                                    >\n                                                      {student.score}\n                                                    </td>\n                                                  )}\n                                                </>\n                                              );\n                                            }\n                                          )}\n                                        </>\n                                      ) : null}\n                                    </tr>\n                                  );\n                                })}\n                              </tbody>\n\n                              <tfoot\n                                className=\"thead-dark\"\n                                style={{ marginInline: '5%' }}\n                              >\n                                <tr>\n                                  {header.map((header1, index) => (\n                                    <th\n                                      key={index}\n                                      className=\"border  text-center\"\n                                    >\n                                      {header1.name}\n                                    </th>\n                                  ))}\n                                  {/* <th className=\"border text-center\">\n                                <IntlMessages id=\"marks.resultHeader\" />\n                              </th> */}\n                                </tr>\n                              </tfoot>\n                            </table>\n                          </Row>\n                          <Row className=\" justify-content-center\">\n                            <Colxx xxs=\"9\" className=\"m-5\">\n                              <Button\n                                className=\" m-4\"\n                                onClick={() => setIsNext(false)}\n                              >\n                                {/* <IntlMessages id=\"button.Back\" /> */}\n                                reject\n                              </Button>\n                            </Colxx>\n                            <div className=\"d-flex justify-content-between align-items-center m-4 float-right\">\n                              <Button\n                                // size=\"lg\"\n                                color=\"primary\"\n                                type=\"submit\"\n                                // onClick={() => getSelectedStudents()}\n                              >\n                                {/* <IntlMessages id=\"button.SubmitButton\" /> */}\n                                Approve\n                              </Button>\n                            </div>\n                          </Row>\n                        </Form>\n                      )}\n                    </Formik>\n                  </Row>\n                </>\n              )}\n            </>\n          ) : (\n            <div className=\"wizard-basic-step text-center pt-3\">\n              <div>\n                <h1 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h1>\n                <h3>\n                  <IntlMessages id=\"wizard.registered\" />\n                </h3>\n                <Button\n                  className=\"m-5 bg-primary\"\n                  onClick={() => {\n                    {\n                      setReload(false);\n                      setIsNext(false);\n                    }\n                  }}\n                >\n                  <IntlMessages id=\"button.Back\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default StudentClassStatusUpgrade;\n","// this compoenent is used to show the list of students whose marks have been uploaded and verified, but students upgraded/degraded class has not been assigned yet\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport callApi from 'helpers/callApi';\nimport currentUser from 'helpers/currentUser';\nimport {\n  studyTimeOptions,\n  semesterValueOptions,\n  classOptions,\n  sectionValueOptions,\n} from '../global-data/options';\nimport './../../../assets/css/global-style.css';\n\n// Year  and SHift\nimport * as Yup from 'yup';\nimport {\n  Row,\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Button,\n  CardTitle,\n  Input,\n} from 'reactstrap';\nimport Select from 'react-select';\nimport { NotificationManager } from 'components/common/react-notifications';\n\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport {\n  FormikReactSelect,\n  FormikTagsInput,\n  FormikDatePicker,\n} from 'containers/form-validations/FormikFields';\nimport userEvent from '@testing-library/user-event';\nimport { async } from 'q';\nimport { AuthContext } from 'context/AuthContext';\n\nconst ValidationSchema = Yup.object().shape({\n  institute: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.InstituteErr\" />),\n\n  educationlaYear: Yup.string().required(\n    <IntlMessages id=\"forms.educationYearErr\" />\n  ),\n\n  studyTime: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.StudyTimeErr\" />),\n\n  classs: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"marks.ClassErr\" />),\n\n  department: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"teacher.departmentIdErr\" />),\n\n  semester: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"class.semesterErr\" />),\n});\n\nconst initialValues = {\n  institute: [],\n  educationlaYear: '',\n  studyTime: [],\n  classs: [],\n  department: [],\n  semester: [],\n};\n\nconst submitInitialValues = {\n  section: [],\n};\n\nconst MarskStatusCheckedStudents = ({ match }) => {\n  const { institutes, classes } = useContext(AuthContext);\n  const [isNext, setIsNext] = useState(false);\n\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [fields, setFields] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [selectedInstitute, setSelectedInstitute] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSemester, setSelectedSemester] = useState('');\n  const [selectedSection, setSelectedSection] = useState('');\n  const [selecedStudyTime, setSelectedStudyTime] = useState('');\n  const [selectedEducationalYear, setSelectedEducationalYear] = useState('');\n  const [passingScore, setPassingScore] = useState(55);\n  const [subjectGrad, setSubjectGrad] = useState();\n  const [subjectGPA, setSubjectGPA] = useState();\n  const [examId, setExamId] = useState();\n\n  const { markId } = useParams();\n\n  //   if (markId) {\n  //     useEffect(() => {\n  //       async function fetchStudent() {\n  //         const { data } = await axios.get(\n  //           `${studentMarkId}/?student_id=${markId}`\n  //         );\n  //         console.log(data, 'object of the data');\n\n  //         // const instGender = genderOptions.map((studentGender) => {\n  //         //   if (studentGender.value === data[0].gender) {\n  //         //     setInitialGender(studentGender);\n  //         //   }\n  //         // });\n  //       }\n  //       fetchStudent();\n  //       //setUpdateMode(true);\n  //     }, []);\n  //   }\n\n  const fetchDepartments = async (instituteId) => {\n    if (!instituteId || !instituteId.value) {\n      return;\n    }\n    const response = await callApi(\n      `institute/institite-department/?institute=${instituteId.value}`,\n      '',\n      null\n    );\n    // console.log('response of department', response);\n    if (response.data && response.status === 200) {\n      console.log('response of department', response);\n      const updatedData = await response.data.map((item) => ({\n        value: item.department.id,\n        label: item.department.name,\n      }));\n      console.log('updatedData of department', updatedData);\n      setDepartments(updatedData); //Set it up when data in Backend is ready\n    } else {\n      console.log('department error');\n    }\n  };\n\n  useEffect(() => {\n    if (selectedInstitute) {\n      console.log('selectedInstitute', selectedInstitute);\n      fetchDepartments(selectedInstitute);\n    }\n  }, [selectedInstitute]);\n\n  // notification message\n  const createNotification = (type, className) => {\n    const cName = className || '';\n    switch (type) {\n      case 'success':\n        NotificationManager.success(\n          'زده کوونکو ته صنف په بریالیتوب تعین شو',\n          'موفقیت',\n          3000,\n          null,\n          null,\n          cName\n        );\n        break;\n      case 'error':\n        NotificationManager.error(\n          'زده کوونکو ته صنف تعین نشو ',\n          'خطا',\n          9000,\n          () => {\n            alert('callback');\n          },\n          null,\n          cName\n        );\n        break;\n      default:\n        NotificationManager.info('Info message');\n        break;\n    }\n  };\n\n  const fechtStudents = async () => {\n    console.log('selectedSemester', selectedSemester);\n    const response = await callApi(\n      `students/marks-status-checked-students/?institute=${selectedInstitute.value}&class_grade=${selectedClass.value}&semester=${selectedSemester.value}&shift=${selecedStudyTime.value}&department=${selectedDepartment.value}&educational_year=${selectedEducationalYear}`,\n      '',\n      null\n    );\n    if (response.data && response.status === 200) {\n      console.log('response of students', response);\n      setStudents(response.data);\n      setIsNext(true);\n    } else {\n      console.log('students error');\n    }\n  };\n\n  const onSubmit = async (values) => {\n    const semesterId = selectedSemester.value;\n    const educationalYear = selectedEducationalYear;\n    const instituteId = selectedInstitute.value;\n    const departmentId = selectedDepartment.value;\n    const className = selectedClass.value;\n\n    const newStudents = students.map((student, index) => {\n      return {\n        student_id: student.student_id,\n        section: values.section[student.student_id].value,\n      };\n    });\n\n    let data = [\n      {\n        educational_year: educationalYear,\n        institute: instituteId,\n        department: departmentId,\n        class_grade: className,\n        semester: semesterId,\n        shift: selecedStudyTime.value,\n      },\n      ...newStudents,\n    ];\n\n    const response = await callApi(\n      'students/set-students-to-new-class/',\n      'POST',\n      data\n    );\n    if (\n      response.status === 200 ||\n      response.status === 201 ||\n      response.status === 202\n    ) {\n      console.log('response of students', response);\n      setIsSubmitted(true);\n      createNotification('success', 'filled');\n    } else {\n      console.log('marks error');\n      setIsSubmitted(false);\n      createNotification('error', 'filled');\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <div className=\"mt-4 ml-5\">\n          <h2 className=\"mt-5 m-5 titleStyle\">\n            {<IntlMessages id=\"student.assignment-to-class\" />}\n          </h2>\n        </div>\n        <CardBody>\n          {!isNext ? (\n            <Formik\n              initialValues={initialValues}\n              onSubmit={fechtStudents}\n              validationSchema={ValidationSchema}\n            >\n              {({\n                errors,\n                touched,\n                values,\n                setFieldTouched,\n                setFieldValue,\n              }) => (\n                <Form className=\"av-tooltip tooltip-label-right  style\">\n                  <Row className=\"m-5\">\n                    <Colxx xxs=\"6\">\n                      {/* set if condition, if institutes are loaded */}\n                      <FormGroup className=\"form-group has-float-label error-l-150 \">\n                        <Label>\n                          <IntlMessages id=\"forms.InstituteLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"institute\"\n                          id=\"institute\"\n                          value={values.institute}\n                          options={institutes}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedInstitute(values.institute)}\n                        />\n\n                        {errors.institute && touched.institute ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.institute}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5  error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.StudyTimeLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"studyTime\"\n                          id=\"studyTime\"\n                          value={values.studyTime}\n                          options={studyTimeOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedStudyTime(values.studyTime)}\n                        />\n                        {errors.studyTime && touched.studyTime ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.studyTime}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.educationYearLabel\" />\n                        </Label>\n                        <Field\n                          type=\"number\"\n                          id=\"educationlaYear\"\n                          className=\"form-control fieldStyle\"\n                          name=\"educationlaYear\"\n                          // assign value to selectedEducationalYear\n                          onClick={setSelectedEducationalYear(\n                            values.educationlaYear\n                          )}\n                        />\n                        {errors.educationlaYear && touched.educationlaYear ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.educationlaYear}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n\n                    <Colxx xxs=\"6\">\n                      <FormGroup className=\"form-group has-float-label error-l-150 \">\n                        <Label>\n                          <IntlMessages id=\"marks.ClassLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"classs\"\n                          id=\"classs\"\n                          value={values.classs}\n                          options={classOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedClass(values.classs)}\n                          required\n                        />\n                        {errors.classs && touched.classs ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.classs}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.studyDepartment\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"department\"\n                          id=\"department\"\n                          value={values.department}\n                          options={departments}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedDepartment(values.department)}\n                          required\n                        />\n                        {errors.department && touched.department ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.department}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"class.semesterLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"semester\"\n                          id=\"semester\"\n                          value={values.semester}\n                          options={semesterValueOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedSemester(values.semester)}\n                          required\n                        />\n                        {errors.semester && touched.semester ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.semester}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n                  </Row>\n                  <Row>\n                    <Colxx>\n                      <Button\n                        color=\"primary\"\n                        className=\"float-right  buttonStyle\"\n                        size=\"lg\"\n                        type=\"submit\"\n                        style={{ margin: '2% 0% 10% 6%' }}\n                      >\n                        <span className=\"label\">\n                          <IntlMessages id=\"button.Next\" />\n                        </span>\n                      </Button>\n                    </Colxx>\n                  </Row>\n                </Form>\n              )}\n            </Formik>\n          ) : (\n            <>\n              {!isSubmitted ? (\n                <>\n                  <Row\n                    className=\"border border bg-primary me-5 p-1 \"\n                    style={{ marginInline: '16%' }}\n                  >\n                    <Colxx xxs=\"2\">\n                      <Label style={{ fontSize: '20px', fontWeight: 'bold' }}>\n                        <IntlMessages id=\"forms.FieldLabel\" />\n                      </Label>\n                      {console.log('selectedDepartment', selectedDepartment)}\n                      <h5>{selectedDepartment.label}</h5>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label style={{ fontSize: '20px', fontWeight: 'bold' }}>\n                        <IntlMessages id=\"marks.ClassLabel\" />\n                      </Label>\n                      <h5>{selectedClass.label}</h5>\n                    </Colxx>\n                    <Colxx xxs=\"2\">\n                      <Label style={{ fontSize: '20px', fontWeight: 'bold' }}>\n                        <IntlMessages id=\"marks.SemesterLabel\" />\n                      </Label>\n                      <h5>{selectedSemester.label}</h5>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label style={{ fontSize: '20px', fontWeight: 'bold' }}>\n                        <IntlMessages id=\"forms.StudyTimeLabel\" />\n                      </Label>\n                      <h5>{selecedStudyTime.label}</h5>\n                    </Colxx>\n                  </Row>\n                  <Formik\n                    initialValues={submitInitialValues}\n                    onSubmit={onSubmit}\n                    // validationSchema={ValidationSchema}\n                  >\n                    {({ errors, values, setFieldValue, setFieldTouched }) => (\n                      <Form className=\"av-tooltip tooltip-label-right \">\n                        <Row\n                          className=\"justify-content-center  border border\"\n                          style={{\n                            marginInline: '16%',\n                            height: '30rem',\n                            overflowY: 'scroll',\n                            overflowX: 'hidden',\n                          }}\n                        >\n                          <table class=\"table \">\n                            <thead className=\"thead-dark\">\n                              <tr>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.No\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.FullName\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.FatherName\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.ID\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  {/* <IntlMessages id=\"marks.Marks\" /> */}\n                                  section\n                                </th>\n                              </tr>\n                            </thead>\n                            <tbody\n                              className=\"border border \"\n                              style={{\n                                overflowY: 'scroll',\n                                overflowX: 'hidden',\n                              }}\n                            >\n                              {students.length > 0 &&\n                                students.map((student, index) => (\n                                  <tr key={index}>\n                                    <th\n                                      scope=\"row\"\n                                      style={{\n                                        fontSize: '20px',\n                                        textAlign: 'center',\n                                      }}\n                                    >\n                                      {index + 1}\n                                    </th>\n                                    <td\n                                      style={{\n                                        fontSize: '20px',\n                                        textAlign: 'center',\n                                      }}\n                                    >\n                                      {student.name}\n                                    </td>\n                                    <td\n                                      style={{\n                                        fontSize: '20px',\n                                        textAlign: 'center',\n                                      }}\n                                    >\n                                      {student.father_name}\n                                    </td>\n                                    <td\n                                      style={{\n                                        fontSize: '20px',\n                                        textAlign: 'center',\n                                      }}\n                                    >\n                                      {student.student_id}\n                                    </td>\n\n                                    {/* Marks Entry */}\n                                    <td>\n                                      <div\n                                        style={{\n                                          margin: '-7px',\n                                          fontSize: '15px',\n                                        }}\n                                      >\n                                        {/* <Field\n                                          type=\"number\"\n                                          style={{\n                                            fontSize: '15px',\n                                            textAlign: 'center',\n                                          }}\n                                          className=\"form-control\"\n                                          name={`score[${student.student_id}]`}\n                                        />\n                                        {errors.score && touched.score ? (\n                                          <div className=\"invalid-feedback d-block\">\n                                            {errors.score}\n                                          </div>\n                                        ) : null} */}\n\n                                        <FormikReactSelect\n                                          name={`section[${student.student_id}]`}\n                                          id={`section[${student.student_id}]`}\n                                          // value={`values.section[${student.student_id}]`}\n                                          options={sectionValueOptions}\n                                          onChange={setFieldValue}\n                                          onBlur={setFieldTouched}\n                                          // onClick={setSelectedSection(\n                                          //   values.section\n                                          // )}\n                                          required\n                                        />\n                                        {errors.section && touched.section ? (\n                                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                            {errors.semester}\n                                          </div>\n                                        ) : null}\n                                      </div>\n                                    </td>\n                                  </tr>\n                                ))}\n                            </tbody>\n                            <tfoot className=\"thead-dark\">\n                              <tr>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.No\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.FullName\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.FatherName\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.ID\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.Marks\" />\n                                </th>\n                              </tr>\n                            </tfoot>\n                          </table>\n                        </Row>\n                        <Row className=\" justify-content-center\">\n                          <Colxx xxs=\"9\" className=\"m-5\">\n                            <Button\n                              className=\" m-4 \"\n                              color=\"primary\"\n                              onClick={() => setIsNext(false)}\n                            >\n                              <IntlMessages id=\"button.Back\" />\n                            </Button>\n\n                            <div className=\"d-flex justify-content-between align-items-center m-4 float-right\">\n                              <Button\n                                size=\"lg\"\n                                type=\"submit\"\n                                color=\"primary\"\n                                // onSubmit={onSubmit}\n                                // onClick={() => setIsSubmitted(true)}\n                              >\n                                <IntlMessages id=\"button.SubmitButton\" />\n                              </Button>\n                            </div>\n                          </Colxx>\n                        </Row>\n                      </Form>\n                    )}\n                  </Formik>\n                </>\n              ) : (\n                <div className=\"wizard-basic-step text-center pt-3\">\n                  <div>\n                    <h1 className=\"mb-2\">\n                      <IntlMessages id=\"wizard.content-thanks\" />\n                    </h1>\n                    <h3>\n                      {/* <IntlMessages id=\"wizard.registered\" /> */}\n                      زده کوونکو ته صنف په بریالیتوب سره تعین شو\n                    </h3>\n                    <Button\n                      className=\"m-5 bg-primary\"\n                      // onClick={() => window.location.reload()}\n                      onClick={() => {\n                        setIsNext(false);\n                        setIsSubmitted(false);\n                      }}\n                    >\n                      <IntlMessages id=\"button.Back\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default MarskStatusCheckedStudents;\n","const currentUser = () => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  console.log('user is here', user.user_id);\n  return user.user_id;\n};\n\nexport default currentUser;\n"],"sourceRoot":""}