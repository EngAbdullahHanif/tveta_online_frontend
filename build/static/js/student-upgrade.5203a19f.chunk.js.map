{"version":3,"file":"static/js/student-upgrade.5203a19f.chunk.js","mappings":"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","sources":["views/app/students/marks-status-checked-students.js","helpers/currentUser.js","views/app/students/student-upgrade.js","views/app/students/students-class-status-upgrade.js"],"sourcesContent":["// this compoenent is used to show the list of students whose marks have been uploaded and verified, but students upgraded/degraded class has not been assigned yet\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { useParams } from 'react-router-dom';\nimport callApi from 'helpers/callApi';\nimport {\n  studyTimeOptions,\n  semesterValueOptions,\n  classOptions,\n  sectionValueOptions,\n} from '../global-data/options';\nimport './../../../assets/css/global-style.css';\n\n// Year  and SHift\nimport * as Yup from 'yup';\nimport { Row, Card, CardBody, FormGroup, Label, Button } from 'reactstrap';\nimport { NotificationManager } from 'components/common/react-notifications';\n\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport { FormikReactSelect } from 'containers/form-validations/FormikFields';\nimport { AuthContext } from 'context/AuthContext';\n\nconst ValidationSchema = Yup.object().shape({\n  institute: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.InstituteErr\" />),\n\n  educationlaYear: Yup.string().required(\n    <IntlMessages id=\"forms.educationYearErr\" />,\n  ),\n\n  studyTime: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.StudyTimeErr\" />),\n\n  classs: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"marks.ClassErr\" />),\n\n  department: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"teacher.departmentIdErr\" />),\n\n  semester: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"class.semesterErr\" />),\n});\n\nconst initialValues = {\n  institute: [],\n  educationlaYear: '',\n  studyTime: [],\n  classs: [],\n  department: [],\n  semester: [],\n};\n\nconst submitInitialValues = {\n  section: [],\n};\n\nconst MarskStatusCheckedStudents = ({ match }) => {\n  const { institutes, classes } = useContext(AuthContext);\n  const [isNext, setIsNext] = useState(false);\n\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [fields, setFields] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [selectedInstitute, setSelectedInstitute] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSemester, setSelectedSemester] = useState('');\n  const [selectedSection, setSelectedSection] = useState('');\n  const [selecedStudyTime, setSelectedStudyTime] = useState('');\n  const [selectedEducationalYear, setSelectedEducationalYear] = useState('');\n  const [passingScore, setPassingScore] = useState(55);\n  const [subjectGrad, setSubjectGrad] = useState();\n  const [subjectGPA, setSubjectGPA] = useState();\n  const [examId, setExamId] = useState();\n\n  const { markId } = useParams();\n\n  //   if (markId) {\n  //     useEffect(() => {\n  //       async function fetchStudent() {\n  //         const { data } = await axios.get(\n  //           `${studentMarkId}/?student_id=${markId}`\n  //         );\n  //         console.log(data, 'object of the data');\n\n  //         // const instGender = genderOptions.map((studentGender) => {\n  //         //   if (studentGender.value === data[0].gender) {\n  //         //     setInitialGender(studentGender);\n  //         //   }\n  //         // });\n  //       }\n  //       fetchStudent();\n  //       //setUpdateMode(true);\n  //     }, []);\n  //   }\n\n  const fetchDepartments = async (instituteId) => {\n    if (!instituteId || !instituteId.value) {\n      return;\n    }\n    const response = await callApi(\n      `institute/institite-department/?institute=${instituteId.value}`,\n      '',\n      null,\n    );\n    // console.log('response of department', response);\n    if (response.data && response.status === 200) {\n      console.log('response of department', response);\n      const updatedData = await response.data.map((item) => ({\n        value: item.department.id,\n        label: item.department.name,\n      }));\n      console.log('updatedData of department', updatedData);\n      setDepartments(updatedData); //Set it up when data in Backend is ready\n    } else {\n      console.log('department error');\n    }\n  };\n\n  useEffect(() => {\n    if (selectedInstitute) {\n      console.log('selectedInstitute', selectedInstitute);\n      fetchDepartments(selectedInstitute);\n    }\n  }, [selectedInstitute]);\n\n  // notification message\n  const createNotification = (type, className) => {\n    const cName = className || '';\n    switch (type) {\n      case 'success':\n        NotificationManager.success(\n          'زده کوونکو ته صنف په بریالیتوب تعین شو',\n          'موفقیت',\n          3000,\n          null,\n          null,\n          cName,\n        );\n        break;\n      case 'error':\n        NotificationManager.error(\n          'زده کوونکو ته صنف تعین نشو ',\n          'خطا',\n          9000,\n          () => {\n            alert('callback');\n          },\n          null,\n          cName,\n        );\n        break;\n      default:\n        NotificationManager.info('Info message');\n        break;\n    }\n  };\n\n  const fechtStudents = async () => {\n    console.log('selectedSemester', selectedSemester);\n    const response = await callApi(\n      `students/marks-status-checked-students/?institute=${selectedInstitute.value}&class_grade=${selectedClass.value}&semester=${selectedSemester.value}&shift=${selecedStudyTime.value}&department=${selectedDepartment.value}&educational_year=${selectedEducationalYear}`,\n      '',\n      null,\n    );\n    if (response.data && response.status === 200) {\n      console.log('response of students', response);\n      setStudents(response.data);\n      setIsNext(true);\n    } else {\n      console.log('students error');\n    }\n  };\n\n  const onSubmit = async (values) => {\n    const semesterId = selectedSemester.value;\n    const educationalYear = selectedEducationalYear;\n    const instituteId = selectedInstitute.value;\n    const departmentId = selectedDepartment.value;\n    const className = selectedClass.value;\n\n    const newStudents = students.map((student, index) => {\n      return {\n        student_id: student.student_id,\n        section: values.section[student.student_id].value,\n      };\n    });\n\n    let data = [\n      {\n        educational_year: educationalYear,\n        institute: instituteId,\n        department: departmentId,\n        class_grade: className,\n        semester: semesterId,\n        shift: selecedStudyTime.value,\n      },\n      ...newStudents,\n    ];\n\n    const response = await callApi(\n      'students/set-students-to-new-class/',\n      'POST',\n      data,\n    );\n    if (\n      response.status === 200 ||\n      response.status === 201 ||\n      response.status === 202\n    ) {\n      console.log('response of students', response);\n      setIsSubmitted(true);\n      createNotification('success', 'filled');\n    } else {\n      console.log('marks error');\n      setIsSubmitted(false);\n      createNotification('error', 'filled');\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <div className=\"mt-4 ml-5\">\n          <h2 className=\"mt-5 m-5 titleStyle\">\n            {<IntlMessages id=\"student.assignment-to-class\" />}\n          </h2>\n        </div>\n        <CardBody>\n          {!isNext ? (\n            <Formik\n              initialValues={initialValues}\n              onSubmit={fechtStudents}\n              validationSchema={ValidationSchema}\n            >\n              {({\n                errors,\n                touched,\n                values,\n                setFieldTouched,\n                setFieldValue,\n              }) => (\n                <Form className=\"av-tooltip tooltip-label-right  style\">\n                  <Row className=\"m-5\">\n                    <Colxx xxs=\"6\">\n                      {/* set if condition, if institutes are loaded */}\n                      <FormGroup className=\"form-group has-float-label error-l-150 \">\n                        <Label>\n                          <IntlMessages id=\"forms.InstituteLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"institute\"\n                          id=\"institute\"\n                          value={values.institute}\n                          options={institutes}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedInstitute(values.institute)}\n                        />\n\n                        {errors.institute && touched.institute ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.institute}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5  error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.StudyTimeLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"studyTime\"\n                          id=\"studyTime\"\n                          value={values.studyTime}\n                          options={studyTimeOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedStudyTime(values.studyTime)}\n                        />\n                        {errors.studyTime && touched.studyTime ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.studyTime}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.educationYearLabel\" />\n                        </Label>\n                        <Field\n                          type=\"number\"\n                          id=\"educationlaYear\"\n                          className=\"form-control fieldStyle\"\n                          name=\"educationlaYear\"\n                          // assign value to selectedEducationalYear\n                          onClick={setSelectedEducationalYear(\n                            values.educationlaYear,\n                          )}\n                        />\n                        {errors.educationlaYear && touched.educationlaYear ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.educationlaYear}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n\n                    <Colxx xxs=\"6\">\n                      <FormGroup className=\"form-group has-float-label error-l-150 \">\n                        <Label>\n                          <IntlMessages id=\"marks.ClassLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"classs\"\n                          id=\"classs\"\n                          value={values.classs}\n                          options={classOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedClass(values.classs)}\n                          required\n                        />\n                        {errors.classs && touched.classs ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.classs}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.studyDepartment\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"department\"\n                          id=\"department\"\n                          value={values.department}\n                          options={departments}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedDepartment(values.department)}\n                          required\n                        />\n                        {errors.department && touched.department ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.department}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"class.semesterLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"semester\"\n                          id=\"semester\"\n                          value={values.semester}\n                          options={semesterValueOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedSemester(values.semester)}\n                          required\n                        />\n                        {errors.semester && touched.semester ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                            {errors.semester}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n                  </Row>\n                  <Row>\n                    <Colxx>\n                      <Button\n                        color=\"primary\"\n                        className=\"float-right  buttonStyle\"\n                        size=\"lg\"\n                        type=\"submit\"\n                        style={{ margin: '2% 0% 10% 6%' }}\n                      >\n                        <span className=\"label\">\n                          <IntlMessages id=\"button.Next\" />\n                        </span>\n                      </Button>\n                    </Colxx>\n                  </Row>\n                </Form>\n              )}\n            </Formik>\n          ) : (\n            <>\n              {!isSubmitted ? (\n                <>\n                  <Row\n                    className=\"border border bg-primary me-5 p-1 \"\n                    style={{ marginInline: '16%' }}\n                  >\n                    <Colxx xxs=\"2\">\n                      <Label style={{ fontSize: '20px', fontWeight: 'bold' }}>\n                        <IntlMessages id=\"forms.FieldLabel\" />\n                      </Label>\n                      {console.log('selectedDepartment', selectedDepartment)}\n                      <h5>{selectedDepartment.label}</h5>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label style={{ fontSize: '20px', fontWeight: 'bold' }}>\n                        <IntlMessages id=\"marks.ClassLabel\" />\n                      </Label>\n                      <h5>{selectedClass.label}</h5>\n                    </Colxx>\n                    <Colxx xxs=\"2\">\n                      <Label style={{ fontSize: '20px', fontWeight: 'bold' }}>\n                        <IntlMessages id=\"marks.SemesterLabel\" />\n                      </Label>\n                      <h5>{selectedSemester.label}</h5>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label style={{ fontSize: '20px', fontWeight: 'bold' }}>\n                        <IntlMessages id=\"forms.StudyTimeLabel\" />\n                      </Label>\n                      <h5>{selecedStudyTime.label}</h5>\n                    </Colxx>\n                  </Row>\n                  <Formik\n                    initialValues={submitInitialValues}\n                    onSubmit={onSubmit}\n                    // validationSchema={ValidationSchema}\n                  >\n                    {({ errors, touched, setFieldValue, setFieldTouched }) => (\n                      <Form className=\"av-tooltip tooltip-label-right \">\n                        <Row\n                          className=\"justify-content-center  border border\"\n                          style={{\n                            marginInline: '16%',\n                            height: '30rem',\n                            overflowY: 'scroll',\n                            overflowX: 'hidden',\n                          }}\n                        >\n                          <table class=\"table \">\n                            <thead className=\"thead-dark\">\n                              <tr>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.No\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.FullName\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.FatherName\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.ID\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  {/* <IntlMessages id=\"marks.Marks\" /> */}\n                                  section\n                                </th>\n                              </tr>\n                            </thead>\n                            <tbody\n                              className=\"border border \"\n                              style={{\n                                overflowY: 'scroll',\n                                overflowX: 'hidden',\n                              }}\n                            >\n                              {students.length > 0 &&\n                                students.map((student, index) => (\n                                  <tr key={index}>\n                                    <th\n                                      scope=\"row\"\n                                      style={{\n                                        fontSize: '20px',\n                                        textAlign: 'center',\n                                      }}\n                                    >\n                                      {index + 1}\n                                    </th>\n                                    <td\n                                      style={{\n                                        fontSize: '20px',\n                                        textAlign: 'center',\n                                      }}\n                                    >\n                                      {student.name}\n                                    </td>\n                                    <td\n                                      style={{\n                                        fontSize: '20px',\n                                        textAlign: 'center',\n                                      }}\n                                    >\n                                      {student.father_name}\n                                    </td>\n                                    <td\n                                      style={{\n                                        fontSize: '20px',\n                                        textAlign: 'center',\n                                      }}\n                                    >\n                                      {student.student_id}\n                                    </td>\n\n                                    {/* Marks Entry */}\n                                    <td>\n                                      <div\n                                        style={{\n                                          margin: '-7px',\n                                          fontSize: '15px',\n                                        }}\n                                      >\n                                        {/* <Field\n                                          type=\"number\"\n                                          style={{\n                                            fontSize: '15px',\n                                            textAlign: 'center',\n                                          }}\n                                          className=\"form-control\"\n                                          name={`score[${student.student_id}]`}\n                                        />\n                                        {errors.score && touched.score ? (\n                                          <div className=\"invalid-feedback d-block\">\n                                            {errors.score}\n                                          </div>\n                                        ) : null} */}\n\n                                        <FormikReactSelect\n                                          name={`section[${student.student_id}]`}\n                                          id={`section[${student.student_id}]`}\n                                          // value={`values.section[${student.student_id}]`}\n                                          options={sectionValueOptions}\n                                          onChange={setFieldValue}\n                                          onBlur={setFieldTouched}\n                                          // onClick={setSelectedSection(\n                                          //   values.section\n                                          // )}\n                                          required\n                                        />\n                                        {errors.section && touched.section ? (\n                                          <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                            {errors.semester}\n                                          </div>\n                                        ) : null}\n                                      </div>\n                                    </td>\n                                  </tr>\n                                ))}\n                            </tbody>\n                            <tfoot className=\"thead-dark\">\n                              <tr>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.No\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.FullName\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.FatherName\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.ID\" />\n                                </th>\n                                <th\n                                  scope=\"col\"\n                                  style={{\n                                    fontSize: '15px',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  <IntlMessages id=\"marks.Marks\" />\n                                </th>\n                              </tr>\n                            </tfoot>\n                          </table>\n                        </Row>\n                        <Row className=\" justify-content-center\">\n                          <Colxx xxs=\"9\" className=\"m-5\">\n                            <Button\n                              className=\" m-4 \"\n                              color=\"primary\"\n                              onClick={() => setIsNext(false)}\n                            >\n                              <IntlMessages id=\"button.Back\" />\n                            </Button>\n\n                            <div className=\"d-flex justify-content-between align-items-center m-4 float-right\">\n                              <Button\n                                size=\"lg\"\n                                type=\"submit\"\n                                color=\"primary\"\n                                // onSubmit={onSubmit}\n                                // onClick={() => setIsSubmitted(true)}\n                              >\n                                <IntlMessages id=\"button.SubmitButton\" />\n                              </Button>\n                            </div>\n                          </Colxx>\n                        </Row>\n                      </Form>\n                    )}\n                  </Formik>\n                </>\n              ) : (\n                <div className=\"wizard-basic-step text-center pt-3\">\n                  <div>\n                    <h1 className=\"mb-2\">\n                      <IntlMessages id=\"wizard.content-thanks\" />\n                    </h1>\n                    <h3>\n                      {/* <IntlMessages id=\"wizard.registered\" /> */}\n                      زده کوونکو ته صنف په بریالیتوب سره تعین شو\n                    </h3>\n                    <Button\n                      className=\"m-5 bg-primary\"\n                      // onClick={() => window.location.reload()}\n                      onClick={() => {\n                        setIsNext(false);\n                        setIsSubmitted(false);\n                      }}\n                    >\n                      <IntlMessages id=\"button.Back\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default MarskStatusCheckedStudents;\n","const currentUser = () => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  console.log('user is here', user.user_id);\n  return user.user_id;\n};\n\nexport default currentUser;\n","// this page is for student upgrade, it is not used in the project, it might be used in the future\n\nimport React, { useState, useEffect } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { studyTimeOptions } from '../../app/global-data/options';\n// Year  and SHift\n\nimport * as Yup from 'yup';\nimport {\n  Row,\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Button,\n  CustomInput,\n} from 'reactstrap';\n\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport { FormikReactSelect } from 'containers/form-validations/FormikFields';\n\nimport currentUser from 'helpers/currentUser';\nimport callApi from 'helpers/callApi';\n\nconst ValidationSchema = Yup.object().shape({\n  institute: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.InstituteErr\" />),\n\n  educationlaYear: Yup.string().required(\n    <IntlMessages id=\"forms.educationYearErr\" />,\n  ),\n\n  studyTime: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.StudyTimeErr\" />),\n\n  classs: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"marks.ClassErr\" />),\n\n  department: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"teacher.departmentIdErr\" />),\n});\n\nconst StudentUpgrade = ({ match }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isNext, setIsNext] = useState(true);\n  const [fields, setFields] = useState([]);\n  const [institutes, setInstitutes] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [classes, setClasses] = useState([]);\n  const [subjects, setSubjects] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [header, setHeader] = useState([]);\n  const [selectedInstitute, setSelectedInstitute] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [selecedStudyTime, setSelectedStudyTime] = useState('');\n  const [selectedEducationalYear, setSelectedEducationalYear] = useState('');\n  const [passingScore, setPassingScore] = useState(55);\n  const [subjectGrad, setSubjectGrad] = useState();\n  const [subjectGPA, setSubjectGPA] = useState();\n  const [checkedItems, setCheckedItems] = useState({});\n\n  const [classs, setClasss] = useState();\n  const [semester, setSemester] = useState();\n  const [section, setSection] = useState();\n\n  const fetchInstitutes = async () => {\n    const response = await callApi('institute/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setInstitutes(updatedData);\n    } else {\n      console.log('institute error');\n    }\n  };\n  const fetchFields = async () => {\n    const response = await callApi('institute/field/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setFields(updatedData);\n    } else {\n      console.log('field error');\n    }\n  };\n  const fetchDepartments = async () => {\n    const response = await callApi('institute/department/', '', null);\n    console.log('response of department', response);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setDepartments(updatedData);\n    } else {\n      console.log('department error');\n    }\n  };\n\n  const fetchClasses = async () => {\n    const response = await callApi('institute/classs/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name + ' - ' + item.semester + ' - ' + item.section,\n      }));\n      setClasses(updatedData);\n    } else {\n      console.log('class error');\n    }\n  };\n\n  const fetchSubjects = async () => {\n    const response = await callApi('institute/subject/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setSubjects(updatedData);\n    } else {\n      console.log('subject error');\n    }\n  };\n\n  useEffect(() => {\n    fetchInstitutes();\n    fetchFields();\n    fetchDepartments();\n    fetchClasses();\n    fetchSubjects();\n  }, []);\n\n  const fetchStudents = async (event) => {\n    setIsNext(false);\n\n    const response = await callApi(\n      `api/class_marks?institute=${selectedInstitute.value}&classs=${selectedClass.value}&shift=${selecedStudyTime.value}&department=${selectedDepartment.value}&educational_year=${selectedEducationalYear}`,\n      '',\n      null,\n    );\n    if (response.data && response.status === 200) {\n      setStudents(response.data);\n      setHeader(response.data[0]);\n\n      console.log('response.data ', response.data);\n\n      // split selected class to get semester and section\n      const classArray = selectedClass.label.split(' - ');\n      setClasss(classArray[0]);\n      setSemester(classArray[1]);\n      setSection(classArray[2]);\n    } else {\n      console.log('students error');\n    }\n  };\n  const handleChange = (event, index) => {\n    const { name, checked } = event.target;\n    setCheckedItems((prevState) => {\n      const newCheckedItems = [...prevState];\n      newCheckedItems[index] = checked;\n      return newCheckedItems;\n    });\n  };\n\n  const onSubmit = (values) => {\n    const checkedItemsObj = { ...checkedItems };\n    // if the index is in the checkedItemsObj, if it is, add the student to the passedStudents array,\n    const passedStudents = students.map((student, index) => {\n      if (checkedItemsObj[index]) {\n        // only returns first index of the student, becuase we only need the student id\n        return student[0].name;\n      }\n    });\n    //remove undefined values from the passedStudents array\n    const fillteredStudents = passedStudents.filter(\n      (student) => student !== undefined && student !== null,\n    );\n\n    const data = [\n      {\n        class_id: selectedClass.value,\n        study_time: selecedStudyTime.value,\n        department_id: selectedDepartment.value,\n        educational_year: selectedEducationalYear,\n        user_id: currentUser(),\n      },\n      { ...fillteredStudents },\n    ];\n\n    const response = callApi('api/class_marks', 'POST', data);\n    if (\n      response.status === 200 ||\n      response.status === 201 ||\n      response.status === 202 ||\n      response.status === 203\n    ) {\n      console.log('response.data', response.data);\n    } else {\n      console.log('error');\n    }\n  };\n\n  const initialValues = {\n    institute: [],\n    educationlaYear: '',\n    studyTime: [],\n    classs: [],\n    department: [],\n  };\n  const secondFormInitialValues = {\n    passedStudents: [],\n  };\n\n  // //Check Box\n  // const [checkedItems, setCheckedItems] = useState(\n  //   students.reduce((acc, student, index) => ({ ...acc, [index]: false }), {})\n  // );\n  const [isMasterChecked, setIsMasterChecked] = useState(false);\n\n  const handleMasterCheckboxChange = (event) => {\n    const isChecked = event.target.checked;\n    const updatedCheckedItems = Object.keys(checkedItems).reduce(\n      (acc, index) => ({ ...acc, [index]: isChecked }),\n      {},\n    );\n    setCheckedItems(updatedCheckedItems);\n    setIsMasterChecked(isChecked);\n  };\n\n  // const handleMasterCheckboxChange = (event) => {\n  //   const isChecked = event.target.checked;\n  //   const updatedCheckedItems = Object.keys(checkedItems).reduce(\n  //     (acc, studentId) => ({ ...acc, [studentId]: { checked: isChecked } }),\n  //     {}\n  //   );\n  //   setCheckedItems(updatedCheckedItems);\n  //   setIsMasterChecked(isChecked);\n  // };\n\n  useEffect(() => {\n    setIsMasterChecked(Object.values(checkedItems).every(Boolean));\n  }, [checkedItems]);\n\n  const [checkedIndexes, setCheckedIndexes] = useState([]);\n\n  const handleCheckboxChange = (index) => {\n    console.log('indexsdfsd', index);\n    // check if the index is already in the array\n    if (checkedIndexes.includes(index)) {\n      // if it is, remove it from the array\n      setCheckedIndexes(checkedIndexes.filter((i) => i !== index));\n      console.log('checkedIndexes reomved', checkedIndexes);\n    } else {\n      // if it's not, add it to the array\n      setCheckedIndexes([...checkedIndexes, index]);\n      console.log('checkedIndexes added', checkedIndexes);\n    }\n  };\n\n  const getSelectedStudents = () => {\n    const arrayLength = Array(students.map((student) => student));\n\n    // cleanedStudents.shift();\n    console.log('arrayLength', arrayLength);\n    console.log('checkedIndesdfxes', checkedIndexes);\n    // filter the students array based on the checkedIndexes array\n    const selectedStudents = students.filter((student, index) =>\n      checkedIndexes.includes(index),\n    );\n    // return the selected students\n    // return selectedStudents;\n    console.log('selectedStudents', selectedStudents);\n  };\n\n  // const checkedIndexes = Object.keys(checkedItems)\n  //   .filter((index) => checkedItems[index])\n  //   .map((index) => parseInt(index));\n\n  return (\n    <>\n      <Card>\n        <h3 className=\"mt-5 m-5\">\n          {<IntlMessages id=\"marks.marksDisplayTitle\" />}\n        </h3>\n        <CardBody>\n          {isNext ? (\n            <Formik\n              initialValues={initialValues}\n              validationSchema={ValidationSchema}\n              onSubmit={fetchStudents}\n            >\n              {({\n                errors,\n                touched,\n                values,\n                setFieldTouched,\n                setFieldValue,\n              }) => (\n                <Form className=\"av-tooltip tooltip-label-right \">\n                  <Row className=\"m-5\">\n                    <Colxx xxs=\"6\">\n                      {/* set if condition, if institutes are loaded */}\n                      <FormGroup className=\"form-group has-float-label error-l-150 \">\n                        <Label>\n                          <IntlMessages id=\"forms.InstituteLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"institute\"\n                          id=\"institute\"\n                          value={values.institute}\n                          options={institutes}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedInstitute(values.institute)}\n                        />\n\n                        {errors.institute && touched.institute ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.institute}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5  error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.StudyTimeLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"studyTime\"\n                          id=\"studyTime\"\n                          value={values.studyTime}\n                          options={studyTimeOptions}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedStudyTime(values.studyTime)}\n                        />\n                        {errors.studyTime && touched.studyTime ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.studyTime}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.educationYearLabel\" />\n                        </Label>\n                        <Field\n                          type=\"number\"\n                          id=\"educationlaYear\"\n                          className=\"form-control\"\n                          name=\"educationlaYear\"\n                          // assign value to selectedEducationalYear\n                          onClick={setSelectedEducationalYear(\n                            values.educationlaYear,\n                          )}\n                        />\n                        {errors.educationlaYear && touched.educationlaYear ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.educationlaYear}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n\n                    <Colxx xxs=\"6\">\n                      <FormGroup className=\"form-group has-float-label error-l-150 \">\n                        <Label>\n                          <IntlMessages id=\"marks.ClassLabel\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"classs\"\n                          id=\"classs\"\n                          value={values.classs}\n                          options={classes}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedClass(values.classs)}\n                          required\n                        />\n                        {errors.classs && touched.classs ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.classs}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n\n                      <FormGroup className=\"form-group has-float-label mt-5 error-l-150\">\n                        <Label>\n                          <IntlMessages id=\"forms.studyDepartment\" />\n                        </Label>\n                        <FormikReactSelect\n                          name=\"department\"\n                          id=\"department\"\n                          value={values.department}\n                          options={departments}\n                          onChange={setFieldValue}\n                          onBlur={setFieldTouched}\n                          onClick={setSelectedDepartment(values.department)}\n                          required\n                        />\n                        {errors.department && touched.department ? (\n                          <div className=\"invalid-feedback d-block bg-danger text-white\">\n                            {errors.department}\n                          </div>\n                        ) : null}\n                      </FormGroup>\n                    </Colxx>\n                  </Row>\n                  <Row>\n                    <Colxx>\n                      <Button\n                        color=\"primary\"\n                        className=\"float-right m-5\"\n                        size=\"lg\"\n                        type=\"submit\"\n                        // onClick={() => {\n                        //   handleClick(false);\n                        // }}\n                      >\n                        <span className=\"spinner d-inline-block\">\n                          <span className=\"bounce1\" />\n                          <span className=\"bounce2\" />\n                          <span className=\"bounce3\" />\n                        </span>\n                        <span className=\"label\">\n                          <IntlMessages id=\"button.Next\" />\n                        </span>\n                      </Button>\n                    </Colxx>\n                  </Row>\n                </Form>\n              )}\n            </Formik>\n          ) : (\n            <>\n              {/* Result of Search */}\n              <Row\n                className=\"border border bg-primary me-5 p-1 \"\n                style={{ marginInline: '2%' }}\n              >\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"forms.FieldLabel\" />\n                  </Label>\n                  <h6>{selectedDepartment.label}</h6>\n                </Colxx>\n\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"marks.ClassLabel\" />\n                  </Label>\n                  <h6>{classs}</h6>\n                </Colxx>\n\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"forms.StudyTimeLabel\" />\n                  </Label>\n                  <h6>{selecedStudyTime.label}</h6>\n                </Colxx>\n\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"marks.SemesterLabel\" />\n                  </Label>\n                  <h6>{semester}</h6>\n                </Colxx>\n\n                <Colxx xxs=\"2\">\n                  <Label>\n                    <IntlMessages id=\"marks.SectionLabel\" />\n                  </Label>\n                  <h6>{section}</h6>\n                </Colxx>\n              </Row>\n              <Row\n                style={{\n                  marginInline: '2%',\n                  maxWidth: '97%',\n                  maxHeight: '900px',\n                  overflowX: 'auto',\n                  overflowY: 'auto',\n                }}\n              >\n                <Formik\n                  initialValues={secondFormInitialValues}\n                  onSubmit={onSubmit}\n                  // validationSchema={ValidationSchema}\n                >\n                  {({ errors }) => (\n                    <Form className=\"table\" striped>\n                      <Row>\n                        <table className=\"table\" striped>\n                          <thead\n                            className=\"thead-dark \"\n                            style={{ marginInline: '2%' }}\n                          >\n                            <tr>\n                              <th colspan=\"3\" className=\"border text-center\">\n                                <IntlMessages id=\"marks.studentChar\" />\n                              </th>\n                              <th\n                                colspan={header.length - 3}\n                                className=\"border text-center\"\n                              >\n                                <IntlMessages id=\"marks.marksDisplayTitle\" />\n                              </th>{' '}\n                              <th className=\"border text-center\">\n                                <IntlMessages id=\"marks.resultHeader\" />\n                              </th>\n                            </tr>\n                          </thead>\n                          <thead\n                            className=\"thead-dark border  text-center\"\n                            style={{ marginInline: '5%' }}\n                          >\n                            <tr>\n                              {header.map((item, index) => (\n                                <th key={index} className=\"border  text-center\">\n                                  {item.name}\n                                </th>\n                              ))}\n                              <th className=\"border text-center\">\n                                {/* <CustomInput\n                                  type=\"checkbox\"\n                                  id=\"CheckAll\"\n                                  checked={isMasterChecked}\n                                  onChange={handleMasterCheckboxChange}\n                                /> */}\n                              </th>\n                            </tr>\n                          </thead>\n\n                          <tbody\n                            className=\"border border \"\n                            style={{\n                              maxHeight: '500px',\n                              overflowY: 'scroll',\n                              overflowX: 'hidden',\n                            }}\n                          >\n                            {students.map((studentRow, index) => {\n                              return (\n                                <tr key={index}>\n                                  {!index == 0 ? (\n                                    <>\n                                      {studentRow.map(\n                                        (student, secondIndex) => {\n                                          return (\n                                            <>\n                                              {secondIndex === 0 ||\n                                              secondIndex === 1 ||\n                                              secondIndex === 2 ? (\n                                                <>\n                                                  <td\n                                                    scope=\"col\"\n                                                    className=\"border text-center \"\n                                                  >\n                                                    {student.name}\n                                                  </td>\n                                                </>\n                                              ) : (\n                                                <td\n                                                  scope=\"col\"\n                                                  className=\"border text-center \"\n                                                >\n                                                  {student.score}\n                                                </td>\n                                              )}\n                                            </>\n                                          );\n                                        },\n                                      )}\n                                      <td\n                                        className=\"border text-center d-flex justify-content-center\"\n                                        key={index}\n                                      >\n                                        <CustomInput\n                                          type=\"radio\"\n                                          id={`name${index}`}\n                                          name={`radio${index}`}\n                                          value={index}\n                                          // checked={checkedIndexes.includes(\n                                          //   index\n                                          // )}\n                                          onChange={() =>\n                                            setCheckedItems({\n                                              ...checkedItems,\n                                              [index]: !checkedItems[index],\n                                            })\n                                          }\n                                        />\n                                        <CustomInput\n                                          type=\"radio\"\n                                          id={`name${index} + 1`}\n                                          name={`radio${index}`}\n                                          value={index}\n                                          // checked={checkedIndexes.includes(\n                                          //   index\n                                          // )}\n                                          onChange={() =>\n                                            setCheckedItems({\n                                              ...checkedItems,\n                                              [index]: !checkedItems[index],\n                                            })\n                                          }\n                                        />\n                                        <CustomInput\n                                          type=\"radio\"\n                                          id={`name${index} + 2`}\n                                          name={`radio${index}`}\n                                          value={index}\n                                          // checked={checkedIndexes.includes(\n                                          //   index\n                                          // )}\n                                          onChange={() =>\n                                            setCheckedItems({\n                                              ...checkedItems,\n                                              [index]: !checkedItems[index],\n                                            })\n                                          }\n                                        />\n                                      </td>\n                                    </>\n                                  ) : null}\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n\n                          <tfoot\n                            className=\"thead-dark\"\n                            style={{ marginInline: '5%' }}\n                          >\n                            <tr>\n                              {header.map((header1, index) => (\n                                <th key={index} className=\"border  text-center\">\n                                  {header1.name}\n                                </th>\n                              ))}\n                              <th className=\"border text-center\">\n                                <IntlMessages id=\"marks.resultHeader\" />\n                              </th>\n                            </tr>\n                          </tfoot>\n                        </table>\n                      </Row>\n                      <Row className=\" justify-content-center\">\n                        <Colxx xxs=\"9\" className=\"m-5\">\n                          <Button\n                            className=\" m-4\"\n                            onClick={() => setIsNext(true)}\n                          >\n                            <IntlMessages id=\"button.Back\" />\n                          </Button>\n                        </Colxx>\n                        <div className=\"d-flex justify-content-between align-items-center m-4 float-right\">\n                          <Button\n                            size=\"lg\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            // onClick={() => getSelectedStudents()}\n                          >\n                            <IntlMessages id=\"button.SubmitButton\" />\n                          </Button>\n                        </div>\n                      </Row>\n                    </Form>\n                  )}\n                </Formik>\n              </Row>\n            </>\n          )}\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default StudentUpgrade;\n","// this is the page where admin can upgrade students exam status to send level which means that student all marks have uploaded, after giveing all subjects exams and if they pass the exam then they can upgrade this status to next level\n\nimport React, { useState, useEffect } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { studyTimeOptions } from '../global-data/options';\nimport './../../../assets/css/global-style.css';\nimport { NotificationManager } from 'components/common/react-notifications';\n\n// Year  and SHift\n\nimport * as Yup from 'yup';\nimport { Row, Card, CardBody, FormGroup, Label, Button } from 'reactstrap';\n\nimport IntlMessages from 'helpers/IntlMessages';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport { FormikReactSelect } from 'containers/form-validations/FormikFields';\n\nimport callApi from 'helpers/callApi';\n\nconst ValidationSchema = Yup.object().shape({\n  institute: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.InstituteErr\" />),\n\n  educationlaYear: Yup.string().required(\n    <IntlMessages id=\"forms.educationYearErr\" />,\n  ),\n\n  studyTime: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"forms.StudyTimeErr\" />),\n\n  classs: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"marks.ClassErr\" />),\n\n  department: Yup.object()\n    .shape({\n      value: Yup.string().required(),\n    })\n    .nullable()\n    .required(<IntlMessages id=\"teacher.departmentIdErr\" />),\n});\n\nconst StudentClassStatusUpgrade = ({ match }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isNext, setIsNext] = useState(false);\n  const [fields, setFields] = useState([]);\n  const [institutes, setInstitutes] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [classes, setClasses] = useState([]);\n  const [subjects, setSubjects] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [header, setHeader] = useState([]);\n  const [selectedInstitute, setSelectedInstitute] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [selecedStudyTime, setSelectedStudyTime] = useState('');\n  const [selectedEducationalYear, setSelectedEducationalYear] = useState('');\n  const [passingScore, setPassingScore] = useState(55);\n  const [subjectGrad, setSubjectGrad] = useState();\n  const [reload, setReload] = useState();\n  const [checkedItems, setCheckedItems] = useState({});\n\n  const [classs, setClasss] = useState();\n  const [semester, setSemester] = useState();\n  const [section, setSection] = useState();\n\n  const fetchInstitutes = async () => {\n    const response = await callApi('institute/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setInstitutes(updatedData);\n    } else {\n      console.log('institute error');\n    }\n  };\n\n  const fetchFields = async () => {\n    const response = await callApi('institute/field/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setFields(updatedData);\n    } else {\n      console.log('field error');\n    }\n  };\n\n  const fetchDepartments = async () => {\n    const response = await callApi('institute/department/', '', null);\n    console.log('response of department', response);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setDepartments(updatedData);\n    } else {\n      console.log('department error');\n    }\n  };\n\n  const fetchClasses = async () => {\n    const response = await callApi('institute/classs/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name + ' - ' + item.semester + ' - ' + item.section,\n      }));\n      setClasses(updatedData);\n    } else {\n      console.log('class error');\n    }\n  };\n\n  const fetchSubjects = async () => {\n    const response = await callApi('institute/subject/', '', null);\n    if (response.data && response.status === 200) {\n      const updatedData = await response.data.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n      setSubjects(updatedData);\n    } else {\n      console.log('subject error');\n    }\n  };\n\n  useEffect(() => {\n    fetchInstitutes();\n    fetchFields();\n    fetchDepartments();\n    fetchClasses();\n    fetchSubjects();\n  }, []);\n\n  const fetchStudents = async (event) => {\n    const response = await callApi(\n      `students/class_marks?institute=${selectedInstitute.value}&classs=${selectedClass.value}&shift=${selecedStudyTime.value}&department=${selectedDepartment.value}&educational_year=${selectedEducationalYear}&upgrade=1`,\n      '',\n      null,\n    );\n    if (response.data && response.status === 200) {\n      setIsNext(true);\n      setStudents(response.data);\n      setHeader(response.data[0]);\n\n      console.log('response.data ', response.data);\n\n      // split selected class to get semester and section\n      const classArray = selectedClass.label.split(' - ');\n      setClasss(classArray[0]);\n      setSemester(classArray[1]);\n      setSection(classArray[2]);\n    } else {\n      console.log('students error');\n    }\n  };\n  const handleChange = (event, index) => {\n    const { name, checked } = event.target;\n    setCheckedItems((prevState) => {\n      const newCheckedItems = [...prevState];\n      newCheckedItems[index] = checked;\n      return newCheckedItems;\n    });\n  };\n\n  const createNotification = (type, className) => {\n    const cName = className || '';\n    switch (type) {\n      case 'success':\n        NotificationManager.success(\n          'شاگردانو نمری تاید شوی',\n          'موفقیت',\n          3000,\n          null,\n          null,\n          cName,\n        );\n        break;\n      case 'error':\n        NotificationManager.error(\n          'نمری تاید نشوی, بیا کوشش وکری',\n          'خطا',\n          9000,\n          () => {\n            alert('callback');\n          },\n          null,\n          cName,\n        );\n        break;\n      default:\n        NotificationManager.info('Info message');\n        break;\n    }\n  };\n\n  const onSubmit = async (values) => {\n    const data = [\n      {\n        institute: selectedInstitute.value,\n        classs: selectedClass.value,\n        shift: selecedStudyTime.value,\n        department: selectedDepartment.value,\n        educational_year: selectedEducationalYear,\n        verification_result: 'verified',\n      },\n      { students: students },\n    ];\n    console.log('data', data);\n\n    const response = await callApi(\n      'students/students-class-status-upgrade/',\n      'POST',\n      data,\n    );\n    if (response.data && response.status === 200) {\n      console.log('response.data', response.data);\n      createNotification('success', 'filled');\n      setReload(false);\n      setIsNext(false);\n      setStudents([]);\n    } else {\n      createNotification('error', 'filled');\n\n      console.log('students error');\n    }\n  };\n\n  const initialValues = {\n    institute: [],\n    educationlaYear: '',\n    studyTime: [],\n    classs: [],\n    department: [],\n  };\n  const secondFormInitialValues = {\n    passedStudents: [],\n  };\n\n  const [isMasterChecked, setIsMasterChecked] = useState(false);\n\n  const handleMasterCheckboxChange = (event) => {\n    const isChecked = event.target.checked;\n    const updatedCheckedItems = Object.keys(checkedItems).reduce(\n      (acc, index) => ({ ...acc, [index]: isChecked }),\n      {},\n    );\n    setCheckedItems(updatedCheckedItems);\n    setIsMasterChecked(isChecked);\n  };\n\n  // const handleMasterCheckboxChange = (event) => {\n  //   const isChecked = event.target.checked;\n  //   const updatedCheckedItems = Object.keys(checkedItems).reduce(\n  //     (acc, studentId) => ({ ...acc, [studentId]: { checked: isChecked } }),\n  //     {}\n  //   );\n  //   setCheckedItems(updatedCheckedItems);\n  //   setIsMasterChecked(isChecked);\n  // };\n\n  useEffect(() => {\n    setIsMasterChecked(Object.values(checkedItems).every(Boolean));\n  }, [checkedItems]);\n\n  const [checkedIndexes, setCheckedIndexes] = useState([]);\n\n  const handleCheckboxChange = (index) => {\n    console.log('indexsdfsd', index);\n    // check if the index is already in the array\n    if (checkedIndexes.includes(index)) {\n      // if it is, remove it from the array\n      setCheckedIndexes(checkedIndexes.filter((i) => i !== index));\n      console.log('checkedIndexes reomved', checkedIndexes);\n    } else {\n      // if it's not, add it to the array\n      setCheckedIndexes([...checkedIndexes, index]);\n      console.log('checkedIndexes added', checkedIndexes);\n    }\n  };\n\n  const getSelectedStudents = () => {\n    const arrayLength = Array(students.map((student) => student));\n\n    // cleanedStudents.shift();\n    console.log('arrayLength', arrayLength);\n    console.log('checkedIndesdfxes', checkedIndexes);\n    // filter the students array based on the checkedIndexes array\n    const selectedStudents = students.filter((student, index) =>\n      checkedIndexes.includes(index),\n    );\n    // return the selected students\n    // return selectedStudents;\n    console.log('selectedStudents', selectedStudents);\n  };\n\n  return (\n    <>\n      <Card>\n        <div className=\"mt-4 ml-5\">\n          <h2 className=\" m-5  titleStyle\">\n            {<IntlMessages id=\"student.marks.completion-approval\" />}\n          </h2>\n        </div>\n        <CardBody>\n          {!reload ? (\n            <>\n              {!isNext ? (\n                <Formik\n                  initialValues={initialValues}\n                  validationSchema={ValidationSchema}\n                  onSubmit={fetchStudents}\n                >\n                  {({\n                    errors,\n                    touched,\n                    values,\n                    setFieldTouched,\n                    setFieldValue,\n                  }) => (\n                    <Form className=\"av-tooltip tooltip-label-right style \">\n                      <Row className=\"m-5\">\n                        <Colxx xxs=\"6\">\n                          {/* set if condition, if institutes are loaded */}\n                          <FormGroup className=\"form-group has-float-label error-l-150 \">\n                            <Label>\n                              <IntlMessages id=\"forms.InstituteLabel\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"institute\"\n                              id=\"institute\"\n                              value={values.institute}\n                              options={institutes}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              onClick={setSelectedInstitute(values.institute)}\n                            />\n\n                            {errors.institute && touched.institute ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.institute}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n\n                          <FormGroup className=\"form-group has-float-label mt-5  error-l-150\">\n                            <Label>\n                              <IntlMessages id=\"forms.StudyTimeLabel\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"studyTime\"\n                              id=\"studyTime\"\n                              value={values.studyTime}\n                              options={studyTimeOptions}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              onClick={setSelectedStudyTime(values.studyTime)}\n                            />\n                            {errors.studyTime && touched.studyTime ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.studyTime}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n                          <FormGroup className=\"form-group has-float-label mt-5 error-l-150 \">\n                            <Label>\n                              <IntlMessages id=\"forms.educationYearLabel\" />\n                            </Label>\n                            <Field\n                              type=\"number\"\n                              id=\"educationlaYear\"\n                              className=\"form-control fieldStyle\"\n                              name=\"educationlaYear\"\n                              // assign value to selectedEducationalYear\n                              onClick={setSelectedEducationalYear(\n                                values.educationlaYear,\n                              )}\n                            />\n                            {errors.educationlaYear &&\n                            touched.educationlaYear ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.educationlaYear}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n                        </Colxx>\n\n                        <Colxx xxs=\"6\">\n                          <FormGroup className=\"form-group has-float-label error-l-150 \">\n                            <Label>\n                              <IntlMessages id=\"marks.ClassLabel\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"classs\"\n                              id=\"classs\"\n                              value={values.classs}\n                              options={classes}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              onClick={setSelectedClass(values.classs)}\n                              required\n                            />\n                            {errors.classs && touched.classs ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.classs}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n\n                          <FormGroup className=\"form-group has-float-label mt-5 error-l-150 \">\n                            <Label>\n                              <IntlMessages id=\"forms.studyDepartment\" />\n                            </Label>\n                            <FormikReactSelect\n                              name=\"department\"\n                              id=\"department\"\n                              value={values.department}\n                              options={departments}\n                              onChange={setFieldValue}\n                              onBlur={setFieldTouched}\n                              onClick={setSelectedDepartment(values.department)}\n                              required\n                            />\n                            {errors.department && touched.department ? (\n                              <div className=\"invalid-feedback d-block bg-danger text-white messageStyle\">\n                                {errors.department}\n                              </div>\n                            ) : null}\n                          </FormGroup>\n                        </Colxx>\n                      </Row>\n                      <Row>\n                        <Colxx>\n                          <Button\n                            color=\"primary\"\n                            className=\"float-right m-5\"\n                            size=\"lg\"\n                            type=\"submit\"\n                            // onClick={() => {\n                            //   handleClick(false);\n                            // }}\n                          >\n                            <span className=\"spinner d-inline-block\">\n                              <span className=\"bounce1\" />\n                              <span className=\"bounce2\" />\n                              <span className=\"bounce3\" />\n                            </span>\n                            <span className=\"label\">\n                              <IntlMessages id=\"button.Next\" />\n                            </span>\n                          </Button>\n                        </Colxx>\n                      </Row>\n                    </Form>\n                  )}\n                </Formik>\n              ) : (\n                <>\n                  {/* Result of Search */}\n                  <Row\n                    className=\"border border bg-primary me-5 p-1\"\n                    style={{ marginInline: '2%' }}\n                  >\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"forms.FieldLabel\" />\n                      </Label>\n                      <h6>{selectedDepartment.label}</h6>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"marks.ClassLabel\" />\n                      </Label>\n                      <h6>{classs}</h6>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"forms.StudyTimeLabel\" />\n                      </Label>\n                      <h6>{selecedStudyTime.label}</h6>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"marks.SemesterLabel\" />\n                      </Label>\n                      <h6>{semester}</h6>\n                    </Colxx>\n\n                    <Colxx xxs=\"2\">\n                      <Label>\n                        <IntlMessages id=\"marks.SectionLabel\" />\n                      </Label>\n                      <h6>{section}</h6>\n                    </Colxx>\n                  </Row>\n                  <Row\n                    style={{\n                      marginInline: '2%',\n                      maxWidth: '97%',\n                      maxHeight: '900px',\n                      overflowX: 'auto',\n                      overflowY: 'auto',\n                    }}\n                  >\n                    <Formik\n                      initialValues={secondFormInitialValues}\n                      onSubmit={onSubmit}\n                      // validationSchema={ValidationSchema}\n                    >\n                      {({ errors }) => (\n                        <Form className=\"table\" striped>\n                          <Row>\n                            <table className=\"table\" striped>\n                              <thead\n                                className=\"thead-dark \"\n                                style={{ marginInline: '2%' }}\n                              >\n                                <tr>\n                                  <th\n                                    colspan=\"3\"\n                                    className=\"border text-center\"\n                                  >\n                                    <IntlMessages id=\"marks.studentChar\" />\n                                  </th>\n                                  <th\n                                    colspan={header.length - 3}\n                                    className=\"border text-center\"\n                                  >\n                                    <IntlMessages id=\"marks.marksDisplayTitle\" />\n                                  </th>{' '}\n                                  {/* <th className=\"border text-center\">\n                                <IntlMessages id=\"marks.resultHeader\" />\n                              </th> */}\n                                </tr>\n                              </thead>\n                              <thead\n                                className=\"thead-dark border  text-center\"\n                                style={{ marginInline: '5%' }}\n                              >\n                                <tr>\n                                  {header.map((item, index) => (\n                                    <th\n                                      key={index}\n                                      className=\"border  text-center\"\n                                    >\n                                      {item.name}\n                                    </th>\n                                  ))}\n                                </tr>\n                              </thead>\n\n                              <tbody\n                                className=\"border border \"\n                                style={{\n                                  maxHeight: '500px',\n                                  overflowY: 'scroll',\n                                  overflowX: 'hidden',\n                                }}\n                              >\n                                {students.map((studentRow, index) => {\n                                  return (\n                                    <tr key={index}>\n                                      {!index == 0 ? (\n                                        <>\n                                          {studentRow.map(\n                                            (student, secondIndex) => {\n                                              return (\n                                                <>\n                                                  {secondIndex === 0 ||\n                                                  secondIndex === 1 ||\n                                                  secondIndex === 2 ? (\n                                                    <td\n                                                      scope=\"col\"\n                                                      className=\"border text-center \"\n                                                    >\n                                                      {student.name}\n                                                    </td>\n                                                  ) : (\n                                                    <td\n                                                      scope=\"col\"\n                                                      className=\"border text-center \"\n                                                    >\n                                                      {student.score}\n                                                    </td>\n                                                  )}\n                                                </>\n                                              );\n                                            },\n                                          )}\n                                        </>\n                                      ) : null}\n                                    </tr>\n                                  );\n                                })}\n                              </tbody>\n\n                              <tfoot\n                                className=\"thead-dark\"\n                                style={{ marginInline: '5%' }}\n                              >\n                                <tr>\n                                  {header.map((header1, index) => (\n                                    <th\n                                      key={index}\n                                      className=\"border  text-center\"\n                                    >\n                                      {header1.name}\n                                    </th>\n                                  ))}\n                                  {/* <th className=\"border text-center\">\n                                <IntlMessages id=\"marks.resultHeader\" />\n                              </th> */}\n                                </tr>\n                              </tfoot>\n                            </table>\n                          </Row>\n                          <Row className=\" justify-content-center\">\n                            <Colxx xxs=\"9\" className=\"m-5\">\n                              <Button\n                                className=\" m-4\"\n                                onClick={() => setIsNext(false)}\n                              >\n                                {/* <IntlMessages id=\"button.Back\" /> */}\n                                reject\n                              </Button>\n                            </Colxx>\n                            <div className=\"d-flex justify-content-between align-items-center m-4 float-right\">\n                              <Button\n                                // size=\"lg\"\n                                color=\"primary\"\n                                type=\"submit\"\n                                // onClick={() => getSelectedStudents()}\n                              >\n                                {/* <IntlMessages id=\"button.SubmitButton\" /> */}\n                                Approve\n                              </Button>\n                            </div>\n                          </Row>\n                        </Form>\n                      )}\n                    </Formik>\n                  </Row>\n                </>\n              )}\n            </>\n          ) : (\n            <div className=\"wizard-basic-step text-center pt-3\">\n              <div>\n                <h1 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h1>\n                <h3>\n                  <IntlMessages id=\"wizard.registered\" />\n                </h3>\n                <Button\n                  className=\"m-5 bg-primary\"\n                  onClick={() => {\n                    {\n                      setReload(false);\n                      setIsNext(false);\n                    }\n                  }}\n                >\n                  <IntlMessages id=\"button.Back\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default StudentClassStatusUpgrade;\n"],"names":["ValidationSchema","Yup","shape","institute","value","required","nullable","_jsx","IntlMessages","id","educationlaYear","studyTime","classs","department","semester","initialValues","submitInitialValues","section","_ref","match","_useContext","useContext","AuthContext","institutes","_useState","classes","useState","_useState2","_slicedToArray","isNext","setIsNext","_useState3","_useState4","isSubmitted","setIsSubmitted","_useState5","_useState6","_useState7","_useState8","departments","setDepartments","_useState9","_useState10","students","setStudents","_useState11","_useState12","selectedInstitute","setSelectedInstitute","_useState13","_useState14","selectedDepartment","setSelectedDepartment","_useState15","_useState16","selectedClass","setSelectedClass","_useState17","_useState18","selectedSemester","setSelectedSemester","_useState19","_useState20","_useState21","_useState22","selecedStudyTime","setSelectedStudyTime","_useState23","_useState24","selectedEducationalYear","setSelectedEducationalYear","_useState25","_useState26","_useState27","_useState28","_useState29","_useState30","_useState31","_useState32","fetchDepartments","useParams","markId","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","instituteId","response","updatedData","wrap","_context","prev","next","abrupt","callApi","concat","sent","data","status","console","log","map","item","label","name","stop","_x","apply","arguments","useEffect","createNotification","type","className","cName","NotificationManager","success","error","alert","info","fechtStudents","_ref3","_callee2","_context2","onSubmit","_ref4","_callee3","values","semesterId","educationalYear","departmentId","newStudents","_context3","student","index","student_id","educational_year","class_grade","shift","_toConsumableArray","_x2","_Fragment","children","_jsxs","Card","CardBody","Button","onClick","Row","style","marginInline","Colxx","xxs","Label","fontSize","fontWeight","Formik","_ref6","errors","touched","setFieldValue","setFieldTouched","Form","height","overflowY","overflowX","class","scope","textAlign","length","father_name","margin","FormikReactSelect","options","sectionValueOptions","onChange","onBlur","color","size","validationSchema","_ref5","FormGroup","studyTimeOptions","Field","classOptions","semesterValueOptions","user","JSON","parse","localStorage","getItem","user_id","setFields","setInstitutes","setClasses","setSubjects","header","setHeader","_useState33","_useState34","_useState35","_useState36","_useState37","_useState38","checkedItems","setCheckedItems","_useState39","_useState40","setClasss","_useState41","_useState42","setSemester","_useState43","_useState44","setSection","fetchInstitutes","fetchFields","fetchClasses","_callee4","_context4","fetchSubjects","_callee5","_context5","fetchStudents","_ref7","_callee6","event","classArray","_context6","split","_useState45","_useState46","setIsMasterChecked","Object","every","Boolean","_useState47","_useState48","_ref8","maxWidth","maxHeight","passedStudents","checkedItemsObj","_objectSpread","fillteredStudents","filter","undefined","class_id","study_time","department_id","currentUser","_ref9","striped","colspan","studentRow","secondIndex","score","CustomInput","_defineProperty","header1","reload","setReload","_callee7","_context7","verification_result","_ref10"],"sourceRoot":""}