{"version":3,"file":"static/js/teacher-list.fa4f82c6.chunk.js","mappings":"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","sources":["containers/form-validations/FormikFields.js","hooks/use-mousetrap.js","views/app/teachers/Components/TeacherList.js","views/app/teachers/bio/teacher-list/TeacherListMain.js","../node_modules/antd/es/_util/colors.js","../node_modules/antd/es/theme/interface/presetColors.js","../node_modules/antd/es/theme/util/genPresetColor.js"],"sourcesContent":["import React from 'react';\nimport Select from 'react-select';\nimport { CustomInput } from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\n\nimport TagsInput from 'react-tagsinput';\nimport 'react-tagsinput/react-tagsinput.css';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\n\nimport DatePicker from 'react-multi-date-picker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Input } from 'antd';\n\nconst FormikReactSelect = ({\n  name,\n  value,\n  options,\n  isMulti,\n  className,\n  onChange,\n  onBlur,\n  onClick,\n  defaultValue,\n  isDisabled,\n  isLoading,\n  isClearable,\n  isRtl,\n  isSearchable,\n  placeholder,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <Select\n      className={`react-select ${className}`}\n      classNamePrefix=\"react-select\"\n      placeholder={\n        placeholder || <IntlMessages id=\"forms.EducationLevelDefaultValue\" />\n      }\n      options={options}\n      isMulti={isMulti}\n      initial\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={value}\n      defaultValue={defaultValue}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      isClearable={isClearable}\n      isRtl={isRtl}\n      isSearchable={isSearchable}\n    />\n  );\n};\n\nconst FormikCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              name={name}\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value.includes(child.value)}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            id={`${name}_${child.value}_${index}`}\n            type=\"checkbox\"\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value.includes(child.value)}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCheckbox = ({ name, value, disabled, label, onChange, onBlur }) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <div className=\"position-relative form-check form-check-inline\">\n      <input\n        name={name}\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        checked={value}\n        disabled={disabled}\n      />\n      <label className=\"form-check-label\">{label}</label>\n    </div>\n  );\n};\n\nconst FormikCustomCheckbox = ({\n  name,\n  value,\n  disabled,\n  label,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <CustomInput\n      type=\"checkbox\"\n      id={name}\n      name={name}\n      label={label}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      checked={value}\n      disabled={disabled}\n      inline\n    />\n  );\n};\n\nconst FormikRadioButtonGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              id={child.value}\n              name={name}\n              type=\"radio\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value === child.value}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomRadioGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            type=\"radio\"\n            id={`${name}_${child.value}_${index}`}\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value === child.value}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikTagsInput = ({ name, value, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return <TagsInput name={name} value={value} onChange={handleChange} />;\n};\n\nconst FormikInputText = ({ name, value, onChange, onBlur, ...otherProps }) => {\n  // const handleChange = (val) => {\n  //   onBlur(name, true);\n  //   onChange(name, val);\n  // };\n  return (\n    <Input\n      name={name}\n      value={value}\n      onChange={onChange}\n      style={{ height: 48, borderRadius: 0 }}\n      {...otherProps}\n    />\n  );\n};\n\nconst FormikSwitch = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return (\n    <Switch\n      name={name}\n      className={className}\n      checked={value}\n      onChange={handleChange}\n    />\n  );\n};\n\nconst FormikDatePicker = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = (_val) => {\n    onBlur(name, true);\n  };\n\n  return (\n    <DatePicker\n      name={name}\n      className={className}\n      selected={value}\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n\nexport {\n  FormikReactSelect,\n  FormikCheckboxGroup,\n  FormikCustomCheckboxGroup,\n  FormikCheckbox,\n  FormikCustomCheckbox,\n  FormikRadioButtonGroup,\n  FormikCustomRadioGroup,\n  FormikTagsInput,\n  FormikInputText,\n  FormikSwitch,\n  FormikDatePicker,\n};\n","import mousetrap from 'mousetrap';\nimport { useEffect, useRef } from 'react';\n\n/**\n * Use mousetrap hook\n *\n * @param  {(string | string[])} handlerKey - A key, key combo or array of combos according to Mousetrap documentation.\n * @param  { function } handlerCallback - A function that is triggered on key combo catch.\n */\nexport default (handlerKey, handlerCallback) => {\n  const actionRef = useRef(null);\n  actionRef.current = handlerCallback;\n\n  useEffect(() => {\n    mousetrap.bind(handlerKey, (evt, combo) => {\n      typeof actionRef.current === 'function' && actionRef.current(evt, combo);\n      evt.preventDefault();\n    });\n    return () => {\n      mousetrap.unbind(handlerKey);\n    };\n  }, [handlerKey]);\n};\n","import React, { useContext, useState } from 'react';\nimport { Badge } from 'reactstrap';\nimport { Table as TB } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { BsPencilSquare } from 'react-icons/bs';\nimport { AuthContext } from 'context/AuthContext';\nimport IntlMessages from 'helpers/IntlMessages';\nimport {\n  genderOptions,\n  gradeOptions,\n  instituteStatusOptions,\n  teacherCurrentStatusOptions,\n} from '../../global-data/options';\nimport { Field, Formik } from 'formik';\nimport { FormikReactSelect } from 'containers/form-validations/FormikFields';\n\nconst TeacherList = ({\n  onFilter,\n  handleResetFields,\n  handleTableChange,\n  data,\n  isLoading,\n  teacherLink,\n}) => {\n  const { provinces } = useContext(AuthContext);\n  const [tableParams, setTableParams] = useState({\n    pagination: {\n      current: 1,\n      pageSize: 10,\n    },\n  });\n  const columns = [\n    {\n      title: 'ګڼه/شماره',\n      dataIndex: 'sno',\n      width: '5%',\n    },\n    {\n      title: 'اساس نمبر',\n      dataIndex: 'student_id',\n      sorter: (a, b) => a.student_id - b.student_id,\n      width: '5%',\n    },\n    {\n      title: 'نوم/نام',\n      dataIndex: 'name',\n      sorter: (a, b) => a.name - b.name,\n      width: '15%',\n    },\n    {\n      title: 'د پلار نوم',\n      dataIndex: 'father_name',\n      width: '15%',\n    },\n    {\n      title: 'جنسیت',\n      dataIndex: 'gender',\n      width: '10%',\n    },\n    {\n      title: 'ولایت',\n      dataIndex: 'province',\n      width: '10%',\n    },\n    {\n      title: 'تلفون شمیره',\n      dataIndex: 'phone_number',\n      width: '12%',\n    },\n    {\n      title: 'بست',\n      dataIndex: 'grade',\n      width: '15%',\n    },\n    {\n      title: 'حالت',\n      dataIndex: 'status',\n      width: '5%',\n    },\n    {\n      title: 'اپدید',\n      dataIndex: 'action',\n      width: '10%',\n    },\n  ];\n  return (\n    <>\n      <div\n        style={{\n          padding: 10,\n          display: 'flex',\n        }}\n      >\n        <Formik\n          initialValues={{\n            filterId: '',\n            filterInstitute: [],\n            filterProvince: [],\n          }}\n          onSubmit={onFilter}\n        >\n          {({\n            values,\n            setFieldValue,\n            handleSubmit,\n            setFieldTouched,\n            resetForm,\n          }) => (\n            <>\n              <Field\n                className=\"form-control fieldStyle\"\n                name=\"filterId\"\n                placeholder=\"ایدی\"\n              />\n              <FormikReactSelect\n                className=\"w-100\"\n                placeholder=\"ولایت\"\n                name=\"filterProvince\"\n                options={provinces}\n                value={values.filterProvince}\n                onChange={setFieldValue}\n                onBlur={setFieldTouched}\n              />\n              <FormikReactSelect\n                className=\"w-100\"\n                placeholder=\"جنسیت\"\n                name=\"filterGender\"\n                options={genderOptions}\n                value={values.filterGender}\n                onChange={setFieldValue}\n                onBlur={setFieldTouched}\n              />\n              <FormikReactSelect\n                className=\"w-100\"\n                placeholder=\"حالت\"\n                name=\"filterStatus\"\n                options={instituteStatusOptions}\n                value={values.filterStatus}\n                onChange={setFieldValue}\n                onBlur={setFieldTouched}\n              />\n              <button className=\"btn btn-secondary\" onClick={handleSubmit}>\n                فلټر\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"btn btn-warning\"\n                onClick={() => handleResetFields(resetForm)}\n              >\n                ریسیټ\n              </button>\n            </>\n          )}\n        </Formik>\n      </div>\n\n      <TB\n        columns={columns}\n        // rowKey={(record) => record.login.uuid}\n        pagination={tableParams.pagination}\n        loading={isLoading}\n        onChange={handleTableChange}\n        dataSource={data?.map((item, index) => ({\n          key: index,\n          sno: (tableParams.pagination.current - 1) * 10 + (index + 1),\n          student_id: item.id,\n\n          name: (\n            <NavLink to={{ pathname: teacherLink + item.id, state: { item } }}>\n              {item.name}\n            </NavLink>\n          ),\n          gender: genderOptions.find((op) => op.value === item.gender).label,\n          father_name: item.father_name,\n          province: provinces.find((pro) => pro.value == item.current_province)\n            ?.label,\n          phone_number: item.phone_number,\n          status: teacherCurrentStatusOptions.map((status) => {\n            if (status.value == item.status) {\n              return (\n                <div\n                  className=\"mb-1 text-small\"\n                  style={{ fontSize: '20px', width: '10%' }}\n                >\n                  <Badge\n                    color={\n                      status.value == 'dismissed'\n                        ? 'danger'\n                        : status.value == 'inprogress' ||\n                          status.value == 'active'\n                        ? 'success'\n                        : status.value == 'freeze'\n                        ? 'secondary'\n                        : 'warning'\n                    }\n                    pill\n                  >\n                    {status.label}\n                  </Badge>\n                </div>\n              );\n            }\n          }),\n          grade: gradeOptions.map((g) => {\n            if (g.value === item.grade)\n              return <IntlMessages id={g.label.props.id} />;\n          }),\n          action: (\n            <NavLink\n              to={`/app/teachers/register/${item.id}`}\n              // style={{ width: '10%' }}\n            >\n              <div>\n                <BsPencilSquare\n                  color=\"green\"\n                  outline\n                  style={{ fontSize: '20px' }}\n                  id=\"updateIcon\"\n                />\n              </div>\n            </NavLink>\n          ),\n        }))}\n      />\n    </>\n  );\n};\n\nexport default TeacherList;\n","import React, { useState, useEffect, useContext } from 'react';\n\n// import { Table as TB } from 'antd';\n// import IntlMessages from 'helpers/IntlMessages';\nimport './list.css';\nimport callApi from 'helpers/callApi';\n// import { Field, Formik } from 'formik';\n// import { FormikReactSelect } from 'containers/form-validations/FormikFields';\n\n// import {\n//   genderOptions,\n//   gradeOptions,\n//   instituteStatusOptions,\n//   teacherCurrentStatusOptions,\n// } from '../../../global-data/options';\nimport useMousetrap from 'hooks/use-mousetrap';\n// import { Badge } from 'reactstrap';\n\n// import { NavLink } from 'react-router-dom';\n// import { BsPencilSquare } from 'react-icons/bs';\nimport { AuthContext } from 'context/AuthContext';\nimport TeacherList from '../../Components/TeacherList';\n\nconst getIndex = (value, arr, prop) => {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i][prop] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst pageSizes = [4, 8, 12, 20];\n\nconst ThumbListPages = ({ match }) => {\n  const { provinces, institutes } = useContext(AuthContext);\n  const [loading, setLoading] = useState(false);\n  const [tableParams, setTableParams] = useState({\n    pagination: {\n      current: 1,\n      pageSize: 10,\n    },\n  });\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedPageSize, setSelectedPageSize] = useState(20);\n  const [selectedGenderOption, setSelectedGenderOption] = useState({\n    column: 'all',\n    label: 'جنیست',\n  });\n  const [selectedProvinceOption, setSelectedProvinceOption] = useState({\n    column: 'all',\n    label: 'ولایت',\n  });\n  const [selectLevelOfEducationOption, setSelectLevelOfEducationOption] =\n    useState({\n      column: 'all',\n      label: 'سطح تحصیلی',\n    });\n\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [items, setItems] = useState([]);\n  const [lastChecked, setLastChecked] = useState(null);\n  const [instituteTeachers, setInstituteTeachers] = useState([]);\n  const [isFilter, setIsFilter] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const columns = [\n    {\n      // title: <PromptInput title=\"اساس نمبر\" colName=\"id\" endpoint=\"teachers\" />,\n      title: 'اساس نمبر',\n      dataIndex: 'student_id',\n      sorter: (a, b) => a.student_id - b.student_id,\n      width: '5%',\n    },\n    {\n      title: 'نوم/نام',\n      dataIndex: 'name',\n      sorter: (a, b) => a.name - b.name,\n      // render: (name) => `${name.first} ${name.last}`,\n      width: '15%',\n    },\n    {\n      title: 'د پلار نوم',\n      dataIndex: 'father_name',\n      width: '15%',\n    },\n    {\n      title: 'جنسیت',\n      dataIndex: 'gender',\n      // filters: [\n      //   { text: 'Male', value: 'male' },\n      //   { text: 'Female', value: 'female' },\n      // ],\n      // filterSearch: true,\n      // onFilter: (value, record) => {\n      //   record.gender.indexOf(value) === 0;\n      // },\n      width: '10%',\n    },\n    {\n      title: 'ولایت',\n      dataIndex: 'province',\n      width: '10%',\n    },\n    {\n      title: 'تلفون شمیره',\n      dataIndex: 'phone_number',\n      width: '12%',\n    },\n    {\n      title: 'بست',\n      dataIndex: 'grade',\n      width: '15%',\n    },\n    {\n      title: 'حالت',\n      dataIndex: 'status',\n      width: '5%',\n    },\n    {\n      title: 'اپډیټ',\n      dataIndex: 'action',\n      width: '5%',\n    },\n  ];\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [\n    selectedPageSize,\n    selectedGenderOption,\n    selectedProvinceOption,\n    selectLevelOfEducationOption,\n  ]);\n  async function fetchData(params = {}) {\n    console.log('PARAMSSSSSSSSSS: ', params);\n    setIsLoading(true);\n    let endpoint = `institute/`;\n    const params1 = {\n      ...params,\n      // if filters reseted, goto first page\n      page: !isFilter ? tableParams.pagination.current : params.page,\n      page_size: tableParams.pagination.pageSize || null,\n    };\n    // const params = {\n    //   id: teacherId,\n    //   // current_district: district,\n    //   page: currentPage,\n    //   limit: selectedPageSize,\n    //   gender: selectedGenderOption?.value,\n    //   current_province:\n    //     selectedProvinceOption?.column === 'all'\n    //       ? ''\n    //       : selectedProvinceOption?.column,\n    // };\n    // console.log('GENDER OPT', selectedProvinceOption);\n    // if (institute !== '') {\n    //   params.institute_id = institute.id;\n    // } else if (\n    //   selectedProvinceOption?.column === 'all' &&\n    //   selectedGenderOption?.column === 'all'\n    // ) {\n    //   if (rest == true) {\n    //     setDistrict('');\n    //     setTeacherId('');\n    //     setRest(false);\n    //   }\n    //   params.current_province = null;\n    //   params.gender = null;\n    // } else if (selectedProvinceOption?.column === 'all') {\n    //   params.province = null;\n    //   params.gender = selectedGenderOption?.value;\n    // } else if (selectedGenderOption?.column === 'all') {\n    //   params.gender = null;\n    // }\n    const response = await callApi(`teachers/`, '', null, params1);\n    setIsLoading(false);\n    if (response.data && response.status === 200) {\n      setInstituteTeachers(response.data);\n      console.log('TTTTTTTTTTTTTTTTTTTTTTTTT', response?.data);\n      setItems(response?.data.results);\n      setSelectedItems([]);\n      // setTotalItemCount(data);\n      setIsLoaded(true);\n    } else {\n      console.log('students error');\n    }\n  }\n\n  const handleTableChange = (pagination, filter, sorter) => {\n    setIsFilter(false);\n    setTableParams({ pagination, filter, ...sorter });\n    if (pagination.pageSize !== tableParams.pagination?.pageSize) {\n      setItems([]);\n    }\n  };\n  const onFilter = async (values) => {\n    setIsFilter(true);\n    setTableParams({\n      ...tableParams,\n      pagination: {\n        ...tableParams.pagination,\n        current: 1,\n      },\n    });\n    let params = {\n      page: 1,\n    };\n\n    params.current_province = values.filterProvince?.value;\n    params.gender = values.filterGender?.value;\n    params.status = values.filterStatus?.value;\n    params.id = values.filterId || null;\n    fetchData(params);\n  };\n  const handleResetFields = (resetForm) => {\n    resetForm({\n      values: {\n        filterId: '',\n        filterInstitute: [],\n        filterProvince: [],\n        filterGender: [],\n      },\n    });\n    setIsFilter(false);\n    fetchData();\n  };\n  useEffect(() => {\n    fetchData();\n  }, [!isFilter ? JSON.stringify(tableParams) : null]);\n\n  const handleChangeSelectAll = (isToggle) => {\n    if (selectedItems.length >= items.length) {\n      if (isToggle) {\n        setSelectedItems([]);\n      }\n    } else {\n      setSelectedItems(items.map((x) => x.id));\n    }\n    document.activeElement.blur();\n    return false;\n  };\n\n  useMousetrap(['ctrl+a', 'command+a'], () => {\n    handleChangeSelectAll(false);\n  });\n\n  useMousetrap(['ctrl+d', 'command+d'], () => {\n    setSelectedItems([]);\n    return false;\n  });\n\n  return !isLoaded ? (\n    <div className=\"loading\" />\n  ) : (\n    <>\n      <div className=\"disable-text-selection\">\n        <h1>د استاد لست/ لست استادان</h1>\n        {/* <div\n          style={{\n            padding: 10,\n            display: 'flex',\n          }}\n        >\n          <Formik\n            initialValues={{\n              filterId: '',\n              filterInstitute: [],\n              filterProvince: [],\n            }}\n            onSubmit={onFilter}\n          >\n            {({\n              values,\n              setFieldValue,\n              handleSubmit,\n              setFieldTouched,\n              resetForm,\n            }) => (\n              <>\n                <Field name=\"filterId\" placeholder=\"ایدی\" />\n                <FormikReactSelect\n                  className=\"w-100\"\n                  placeholder=\"ولایت\"\n                  name=\"filterProvince\"\n                  options={provinces}\n                  value={values.filterProvince}\n                  onChange={setFieldValue}\n                  onBlur={setFieldTouched}\n                />\n                <FormikReactSelect\n                  className=\"w-100\"\n                  placeholder=\"جنسیت\"\n                  name=\"filterGender\"\n                  options={genderOptions}\n                  value={values.filterGender}\n                  onChange={setFieldValue}\n                  onBlur={setFieldTouched}\n                />\n                <FormikReactSelect\n                  className=\"w-100\"\n                  placeholder=\"حالت\"\n                  name=\"filterStatus\"\n                  options={instituteStatusOptions}\n                  value={values.filterStatus}\n                  onChange={setFieldValue}\n                  onBlur={setFieldTouched}\n                />\n                <button className=\"btn btn-secondary\" onClick={handleSubmit}>\n                  فلټر\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"btn btn-warning\"\n                  onClick={() => handleResetFields(resetForm)}\n                >\n                  ریسیټ\n                </button>\n              </>\n            )}\n          </Formik>\n        </div>\n        <TB\n          columns={columns}\n          // rowKey={(record) => record.login.uuid}\n          pagination={tableParams.pagination}\n          loading={isLoading}\n          onChange={handleTableChange}\n          dataSource={items.map((item, index) => ({\n            key: index,\n            student_id: item.id,\n            name: <NavLink to={`teacher/${item.id}`}>{item.name}</NavLink>,\n            gender: genderOptions.find((op) => op.value === item.gender).label,\n            father_name: item.father_name,\n            province: provinces.find(\n              (pro) => pro.value == item.current_province,\n            ).label,\n            phone_number: item.phone_number,\n            status: teacherCurrentStatusOptions.map((status) => {\n              if (status.value == item.status) {\n                return (\n                  <div\n                    className=\"mb-1 text-small\"\n                    style={{ fontSize: '20px', width: '10%' }}\n                  >\n                    <Badge\n                      color={\n                        status.value == 'dismissed'\n                          ? 'danger'\n                          : status.value == 'inprogress' ||\n                            status.value == 'active'\n                          ? 'success'\n                          : status.value == 'freeze'\n                          ? 'secondary'\n                          : 'warning'\n                      }\n                      pill\n                    >\n                      {status.label}\n                    </Badge>\n                  </div>\n                );\n              }\n            }),\n            grade: gradeOptions.map((g) => {\n              if (g.value === item.grade)\n                return <IntlMessages id={g.label.props.id} />;\n            }),\n\n            action: (\n              <NavLink\n                to={`/app/teachers/register/${item.id}`}\n                // style={{ width: '10%' }}\n              >\n                <div>\n                  <BsPencilSquare\n                    color=\"green\"\n                    outline\n                    style={{ fontSize: '20px' }}\n                    id=\"updateIcon\"\n                  />\n                </div>\n              </NavLink>\n            ),\n          }))}\n        /> */}\n        <TeacherList\n          onFilter={onFilter}\n          handleResetFields={handleResetFields}\n          handleTableChange={handleTableChange}\n          data={items}\n          isLoading={isLoading}\n          teacherLink={`teacher/`}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ThumbListPages;\n","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { PresetColors } from '../theme/interface';\nconst inverseColors = PresetColors.map(color => `${color}-inverse`);\nexport const PresetStatusColorTypes = ['success', 'processing', 'error', 'default', 'warning'];\n/**\n * determine if the color keyword belongs to the `Ant Design` {@link PresetColors}.\n * @param color color to be judged\n * @param includeInverse whether to include reversed colors\n */\nexport function isPresetColor(color) {\n  let includeInverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (includeInverse) {\n    return [].concat(_toConsumableArray(inverseColors), _toConsumableArray(PresetColors)).includes(color);\n  }\n  return PresetColors.includes(color);\n}\nexport function isPresetStatusColor(color) {\n  return PresetStatusColorTypes.includes(color);\n}","export const PresetColors = ['blue', 'purple', 'cyan', 'green', 'magenta', 'pink', 'red', 'orange', 'yellow', 'volcano', 'geekblue', 'lime', 'gold'];","import { PresetColors } from '../interface';\nexport default function genPresetColor(token, genCss) {\n  return PresetColors.reduce((prev, colorKey) => {\n    const lightColor = token[`${colorKey}1`];\n    const lightBorderColor = token[`${colorKey}3`];\n    const darkColor = token[`${colorKey}6`];\n    const textColor = token[`${colorKey}7`];\n    return Object.assign(Object.assign({}, prev), genCss(colorKey, {\n      lightColor,\n      lightBorderColor,\n      darkColor,\n      textColor\n    }));\n  }, {});\n}"],"names":["FormikReactSelect","_ref","name","value","options","isMulti","className","onChange","onBlur","defaultValue","onClick","isDisabled","isLoading","isClearable","isRtl","isSearchable","placeholder","_jsx","Select","concat","classNamePrefix","IntlMessages","id","initial","val","FormikInputText","_ref9","otherProps","_objectWithoutProperties","_excluded","Input","_objectSpread","style","height","borderRadius","FormikDatePicker","_ref11","DatePicker","selected","_val","handlerKey","handlerCallback","actionRef","useRef","current","useEffect","mousetrap","evt","combo","preventDefault","onFilter","handleResetFields","handleTableChange","data","teacherLink","provinces","useContext","AuthContext","_useState","useState","pagination","pageSize","_useState2","_slicedToArray","tableParams","_jsxs","_Fragment","children","padding","display","Formik","initialValues","filterId","filterInstitute","filterProvince","onSubmit","_ref2","values","setFieldValue","handleSubmit","setFieldTouched","resetForm","Field","genderOptions","filterGender","instituteStatusOptions","filterStatus","type","TB","columns","title","dataIndex","width","sorter","a","b","student_id","loading","dataSource","map","item","index","_provinces$find","key","sno","NavLink","to","pathname","state","gender","find","op","label","father_name","province","pro","current_province","phone_number","status","teacherCurrentStatusOptions","fontSize","Badge","color","pill","grade","gradeOptions","g","props","action","BsPencilSquare","outline","match","_useContext","institutes","_useState3","_useState4","setTableParams","_useState5","_useState6","isLoaded","setIsLoaded","_useState7","_useState8","setCurrentPage","_useState9","_useState10","selectedPageSize","_useState11","column","_useState12","selectedGenderOption","_useState13","_useState14","selectedProvinceOption","_useState15","_useState16","selectLevelOfEducationOption","_useState17","_useState18","selectedItems","setSelectedItems","_useState19","_useState20","items","setItems","_useState21","_useState22","_useState23","_useState24","setInstituteTeachers","_useState25","_useState26","isFilter","setIsFilter","_useState27","_useState28","setIsLoading","fetchData","_fetchData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","params","params1","response","_args2","wrap","_context2","prev","next","length","undefined","console","log","page","page_size","callApi","sent","results","stop","_callee","_values$filterProvinc","_values$filterGender","_values$filterStatus","_context","_x","JSON","stringify","useMousetrap","isToggle","x","document","activeElement","blur","TeacherList","filter","_tableParams$paginati","inverseColors","PresetColors","PresetStatusColorTypes","isPresetColor","_toConsumableArray","includes","isPresetStatusColor","genPresetColor","token","genCss","reduce","colorKey","lightColor","lightBorderColor","darkColor","textColor","Object","assign"],"sourceRoot":""}