{"version":3,"file":"static/js/teacher-list.fe8a8a97.chunk.js","mappings":"0YAeMA,EAAoB,SAAHC,GAgBhB,IAfLC,EAAID,EAAJC,KACAC,EAAKF,EAALE,MACAC,EAAOH,EAAPG,QACAC,EAAOJ,EAAPI,QACAC,EAASL,EAATK,UACAC,EAAQN,EAARM,SACAC,EAAMP,EAANO,OAEAC,GADOR,EAAPS,QACYT,EAAZQ,cACAE,EAAUV,EAAVU,WACAC,EAASX,EAATW,UACAC,EAAWZ,EAAXY,YACAC,EAAKb,EAALa,MACAC,EAAYd,EAAZc,aACAC,EAAWf,EAAXe,YAUA,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLZ,UAAS,gBAAAa,OAAkBb,GAC3Bc,gBAAgB,eAChBJ,YACEA,IAAeC,EAAAA,EAAAA,KAACI,EAAAA,EAAY,CAACC,GAAG,qCAElClB,QAASA,EACTC,QAASA,EACTkB,SAAO,EACPhB,SAlBiB,SAACiB,GACpBjB,EAASL,EAAMsB,EACjB,EAiBIhB,OAfe,WACjBA,EAAON,GAAM,EACf,EAcIC,MAAOA,EACPM,aAAcA,EACdE,WAAYA,EACZC,UAAWA,EACXC,YAAaA,EACbC,MAAOA,EACPC,aAAcA,GAGpB,EA8OMU,EAAkB,SAAHC,GAA0D,IAApDxB,EAAIwB,EAAJxB,KAAMC,EAAKuB,EAALvB,MAAOI,EAAQmB,EAARnB,SAAqBoB,GAALD,EAANlB,QAAqBoB,EAAAA,EAAAA,GAAAF,EAAAG,IAKrE,OACEZ,EAAAA,EAAAA,KAACa,EAAAA,GAAKC,EAAAA,EAAAA,GAAA,CACJ7B,KAAMA,EACNC,MAAOA,EACPI,SAAUA,EACVyB,MAAO,CAAEC,OAAQ,GAAIC,aAAc,IAC/BP,GAGV,EAkBMQ,EAAmB,SAAHC,GAAsD,IAAhDlC,EAAIkC,EAAJlC,KAAMC,EAAKiC,EAALjC,MAAOG,EAAS8B,EAAT9B,UAAWC,EAAQ6B,EAAR7B,SAAUC,EAAM4B,EAAN5B,OAS5D,OACES,EAAAA,EAAAA,KAACoB,EAAAA,GAAU,CACTnC,KAAMA,EACNI,UAAWA,EACXgC,SAAUnC,EACVI,SAbiB,SAACiB,GACpBjB,EAASL,EAAMsB,EACjB,EAYIhB,OAVe,SAAC+B,GAClB/B,EAAON,GAAM,EACf,GAWF,C,2DCpVA,aAAgBsC,EAAYC,GAC1B,IAAMC,GAAYC,EAAAA,EAAAA,QAAO,MACzBD,EAAUE,QAAUH,GAEpBI,EAAAA,EAAAA,YAAU,WAKR,OAJAC,IAAAA,KAAeN,GAAY,SAACO,EAAKC,GACF,oBAAtBN,EAAUE,SAA0BF,EAAUE,QAAQG,EAAKC,GAClED,EAAIE,gBACN,IACO,WACLH,IAAAA,OAAiBN,EACnB,CACF,GAAG,CAACA,GACL,C,6OCylBD,UA/kBuB,SAAHvC,GAAWA,EAALiD,MAAa,IACrCC,GAAkCC,EAAAA,EAAAA,YAAWC,EAAAA,GAArCC,EAASH,EAATG,UACRC,GAD6BJ,EAAVK,YACWC,EAAAA,EAAAA,WAAS,IAAMC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAC7CK,GADcF,EAAA,GAAYA,EAAA,IACYD,EAAAA,EAAAA,UAAS,CAC7CI,WAAY,CACVjB,QAAS,EACTkB,SAAU,OAEZC,GAAAJ,EAAAA,EAAAA,GAAAC,EAAA,GALKI,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAWlCG,GAJgCZ,EAAUa,KAAI,SAACC,GAAQ,MAAM,CAC3DC,OAAQD,EAASjE,MACjBmE,MAAOF,EAASE,MACjB,KAC+Bb,EAAAA,EAAAA,WAAS,IAAMc,GAAAZ,EAAAA,EAAAA,GAAAO,EAAA,GAAxCM,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAsCjB,EAAAA,EAAAA,UAAS,aAAYkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAC3DE,GADkBD,EAAA,GAAgBA,EAAA,IACIlB,EAAAA,EAAAA,UAAS,IAAEoB,GAAAlB,EAAAA,EAAAA,GAAAiB,EAAA,GAA7BE,GAAFD,EAAA,GAAgBA,EAAA,IAClCE,GAAgDtB,EAAAA,EAAAA,UAAS,IAAGuB,GAAArB,EAAAA,EAAAA,GAAAoB,EAAA,GAArDE,EAAgBD,EAAA,GACvBE,GAD4CF,EAAA,IACYvB,EAAAA,EAAAA,UAAS,CAC/DY,OAAQ,MACRC,MAAO,oCACPa,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAHKE,EAAoBD,EAAA,GAI3BE,GAJoDF,EAAA,IAIQ1B,EAAAA,EAAAA,UAAS,CACnEY,OAAQ,MACRC,MAAO,oCACPgB,GAAA3B,EAAAA,EAAAA,GAAA0B,EAAA,GAHKE,EAAsBD,EAAA,GAI7BE,GAJwDF,EAAA,IAKtD7B,EAAAA,EAAAA,UAAS,CACPY,OAAQ,MACRC,MAAO,6DACPmB,GAAA9B,EAAAA,EAAAA,GAAA6B,EAAA,GAJGE,EAA4BD,EAAA,GAMnCE,GANoEF,EAAA,IAMlChC,EAAAA,EAAAA,WAAS,IAAMmC,GAAAjC,EAAAA,EAAAA,GAAAgC,EAAA,GACjDE,GADgBD,EAAA,GAAcA,EAAA,IACcnC,EAAAA,EAAAA,UAAS,IAAEqC,GAAAnC,EAAAA,EAAAA,GAAAkC,EAAA,GACvDE,GADqBD,EAAA,GAAmBA,EAAA,IACNrC,EAAAA,EAAAA,UAAS,IAAEuC,GAAArC,EAAAA,EAAAA,GAAAoC,EAAA,GAC7CE,GADgBD,EAAA,GAAcA,EAAA,IACIvC,EAAAA,EAAAA,UAAS,KAAGyC,IAAAvC,EAAAA,EAAAA,GAAAsC,EAAA,GAC9CE,IADgBD,GAAA,GAAcA,GAAA,IACEzC,EAAAA,EAAAA,UAAS,KAAG2C,IAAAzC,EAAAA,EAAAA,GAAAwC,GAAA,GAC5CE,IADeD,GAAA,GAAaA,GAAA,IACI3C,EAAAA,EAAAA,UAAS,KAAG6C,IAAA3C,EAAAA,EAAAA,GAAA0C,GAAA,GAC5CE,IADeD,GAAA,GAAaA,GAAA,IACc7C,EAAAA,EAAAA,UAAS,KAAG+C,IAAA7C,EAAAA,EAAAA,GAAA4C,GAAA,GAA/CE,GAAaD,GAAA,GAAEE,GAAgBF,GAAA,GACtCG,IAA0BlD,EAAAA,EAAAA,UAAS,IAAGmD,IAAAjD,EAAAA,EAAAA,GAAAgD,GAAA,GAA/BE,GAAKD,GAAA,GAAEE,GAAQF,GAAA,GACtBG,IAAsCtD,EAAAA,EAAAA,UAAS,MAAKuD,IAAArD,EAAAA,EAAAA,GAAAoD,GAAA,GACpDE,IADkBD,GAAA,GAAgBA,GAAA,IACVvD,EAAAA,EAAAA,UAAS,IAAEyD,IAAAvD,EAAAA,EAAAA,GAAAsD,GAAA,GACnCE,IADWD,GAAA,GAASA,GAAA,IACczD,EAAAA,EAAAA,UAAS,KAAG2D,IAAAzD,EAAAA,EAAAA,GAAAwD,GAAA,GAC9CE,IADgBD,GAAA,GAAcA,GAAA,IACoB3D,EAAAA,EAAAA,UAAS,KAAG6D,IAAA3D,EAAAA,EAAAA,GAAA0D,GAAA,GAApCE,IAAFD,GAAA,GAAsBA,GAAA,IAC9CE,IAAgC/D,EAAAA,EAAAA,WAAS,GAAMgE,IAAA9D,EAAAA,EAAAA,GAAA6D,GAAA,GAAxCE,GAAQD,GAAA,GAAEE,GAAWF,GAAA,GAC5BG,IAAkCnE,EAAAA,EAAAA,WAAS,GAAMoE,IAAAlE,EAAAA,EAAAA,GAAAiE,GAAA,GAA1ChH,GAASiH,GAAA,GAAEC,GAAYD,GAAA,GAmE3B,SACYE,KAAS,OAAAC,GAAAC,MAAC,KAADC,UAAA,UAAAF,KAqDvB,OArDuBA,IAAAG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAxB,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAR,UAAA,OAAAE,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAwCE,OAxCuBP,EAAMG,EAAAK,OAAA,QAAAC,IAAAN,EAAA,GAAAA,EAAA,GAAG,CAAC,EACjCO,QAAQC,IAAI,oBAAqBX,GACjCT,IAAa,GACD,aACNU,GAAOzG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACRwG,GAAM,IAETY,KAAOzB,GAA4Ca,EAAOY,KAAxCnF,EAAYH,WAAWjB,QACzCwG,UAAWpF,EAAYH,WAAWC,UAAY,OAgChD8E,EAAAE,KAAA,GACuBO,EAAAA,EAAAA,GAAQ,YAAa,GAAI,KAAMb,GAAS,KAAD,EAAxDC,EAAQG,EAAAU,KACdxB,IAAa,GACTW,EAASc,MAA4B,MAApBd,EAASe,QAC5BjC,GAAqBkB,EAASc,MAC9BN,QAAQC,IAAI,4BAAqC,OAART,QAAQ,IAARA,OAAQ,EAARA,EAAUc,MACnDzC,GAAiB,OAAR2B,QAAQ,IAARA,OAAQ,EAARA,EAAUc,KAAKE,SACxB/C,GAAiB,IAEjBjC,GAAY,IAEZwE,QAAQC,IAAI,kBACb,yBAAAN,EAAAc,OAAA,GAAApB,EAAA,KACFN,GAAAC,MAAA,KAAAC,UAAA,EA7DDrF,EAAAA,EAAAA,YAAU,WACRiC,EAAe,EACjB,GAAG,CACDG,EACAG,EACAG,EACAG,IAyDF,IAOMiE,GAAQ,eAAAC,GAAAzB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAwB,EAAOC,GAAM,IAAAC,EAAAC,EAAAC,EAAA1B,EAAA,OAAAH,EAAAA,EAAAA,KAAAO,MAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OAC5BnB,IAAY,GACZ1D,GAAclC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACXiC,GAAW,IACdH,YAAU9B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACLiC,EAAYH,YAAU,IACzBjB,QAAS,QAGT2F,EAAS,CACXY,KAAM,IAGDgB,iBAAwC,QAAxBJ,EAAGD,EAAOM,sBAAc,IAAAL,OAAA,EAArBA,EAAuB5J,MACjDoI,EAAO8B,OAA4B,QAAtBL,EAAGF,EAAOQ,oBAAY,IAAAN,OAAA,EAAnBA,EAAqB7J,MACrCoI,EAAOiB,OAA4B,QAAtBS,EAAGH,EAAOS,oBAAY,IAAAN,OAAA,EAAnBA,EAAqB9J,MACrCoI,EAAOjH,GAAKwI,EAAOU,UAAY,KAC/BzC,GAAUQ,GAAQ,wBAAA2B,EAAAR,OAAA,GAAAG,EAAA,KACnB,gBAlBaY,GAAA,OAAAb,EAAA3B,MAAA,KAAAC,UAAA,MA+BdrF,EAAAA,EAAAA,YAAU,WACRkF,IACF,GAAG,CAAEL,GAAyC,KAA9BgD,KAAKC,UAAU3G,MA8D/B4G,EAAAA,EAAAA,GAAa,CAAC,SAAU,cAAc,WAzBR,IAACC,KA0BP,EAzBlBpE,GAAcsC,QAAUlC,GAAMkC,OAC5B8B,GACFnE,GAAiB,IAGnBA,GAAiBG,GAAM1C,KAAI,SAAC2G,GAAC,OAAKA,EAAExJ,EAAE,KAExCyJ,SAASC,cAAcC,MAmBzB,KAEAL,EAAAA,EAAAA,GAAa,CAAC,SAAU,cAAc,WAEpC,OADAlE,GAAiB,KACV,CACT,IAKA,OAAQlC,GAGNvD,EAAAA,EAAAA,KAAAiK,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAK9K,UAAU,yBAAwB6K,SAAA,EACrClK,EAAAA,EAAAA,KAAA,MAAAkK,SAAI,6HA0KJlK,EAAAA,EAAAA,KAAA,OACEe,MAAO,CACLqJ,QAAS,GACTC,QAAS,QACTH,UAEFlK,EAAAA,EAAAA,KAACsK,EAAAA,GAAM,CACLC,cAAe,CACbhB,SAAU,GACViB,gBAAiB,GACjBrB,eAAgB,IAElBsB,SAAU/B,GAASwB,SAElB,SAAAQ,GAAA,IACC7B,EAAM6B,EAAN7B,OACA8B,EAAaD,EAAbC,cACAC,EAAYF,EAAZE,aACAC,EAAeH,EAAfG,gBACAC,EAASJ,EAATI,UAAS,OAETX,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACElK,EAAAA,EAAAA,KAAC+K,EAAAA,GAAK,CAAC9L,KAAK,WAAWc,YAAY,8BACnCC,EAAAA,EAAAA,KAACjB,EAAAA,GAAiB,CAChBM,UAAU,QACVU,YAAY,iCACZd,KAAK,iBACLE,QAASkD,EACTnD,MAAO2J,EAAOM,eACd7J,SAAUqL,EACVpL,OAAQsL,KAEV7K,EAAAA,EAAAA,KAACjB,EAAAA,GAAiB,CAChBM,UAAU,QACVU,YAAY,iCACZd,KAAK,eACLE,QAAS6L,EAAAA,GACT9L,MAAO2J,EAAOQ,aACd/J,SAAUqL,EACVpL,OAAQsL,KAEV7K,EAAAA,EAAAA,KAACjB,EAAAA,GAAiB,CAChBM,UAAU,QACVU,YAAY,2BACZd,KAAK,eACLE,QAAS8L,EAAAA,GACT/L,MAAO2J,EAAOS,aACdhK,SAAUqL,EACVpL,OAAQsL,KAEV7K,EAAAA,EAAAA,KAAA,UAAQX,UAAU,oBAAoBI,QAASmL,EAAaV,SAAC,8BAI7DlK,EAAAA,EAAAA,KAAA,UACEkL,KAAK,SACL7L,UAAU,kBACVI,QAAS,kBAhUC,SAACqL,GACzBA,EAAU,CACRjC,OAAQ,CACNU,SAAU,GACViB,gBAAiB,GACjBrB,eAAgB,GAChBE,aAAc,MAGlB3C,IAAY,GACZI,IACF,CAqT+BqE,CAAkBL,EAAU,EAACZ,SAC7C,qCAGA,OAITlK,EAAAA,EAAAA,KAACoL,EAAAA,EAAE,CACDC,QA7dQ,CACd,CAEEC,MAAO,oDACPC,UAAW,aACXC,OAAQ,SAACC,EAAGC,GAAC,OAAKD,EAAEE,WAAaD,EAAEC,UAAU,EAC7CC,MAAO,MAET,CACEN,MAAO,wCACPC,UAAW,OACXC,OAAQ,SAACC,EAAGC,GAAC,OAAKD,EAAExM,KAAOyM,EAAEzM,IAAI,EAEjC2M,MAAO,OAET,CACEN,MAAO,qDACPC,UAAW,cACXK,MAAO,OAET,CACEN,MAAO,iCACPC,UAAW,SASXK,MAAO,OAET,CACEN,MAAO,iCACPC,UAAW,WACXK,MAAO,OAET,CACEN,MAAO,gEACPC,UAAW,eACXK,MAAO,OAET,CACEN,MAAO,qBACPC,UAAW,QACXK,MAAO,OAET,CACEN,MAAO,2BACPC,UAAW,SACXK,MAAO,MAET,CACEN,MAAO,iCACPC,UAAW,SACXK,MAAO,OAuaHhJ,WAAYG,EAAYH,WACxBiJ,QAASlM,GACTL,SAvWkB,SAACsD,EAAYkJ,EAAQN,GAAY,IAADO,EACxDrF,IAAY,GACZ1D,GAAclC,EAAAA,EAAAA,GAAC,CAAE8B,WAAAA,EAAYkJ,OAAAA,GAAWN,IACpC5I,EAAWC,YAAmC,QAA3BkJ,EAAKhJ,EAAYH,kBAAU,IAAAmJ,OAAA,EAAtBA,EAAwBlJ,WAClDgD,GAAS,GAEb,EAkWQmG,WAAYpG,GAAM1C,KAAI,SAAC+I,EAAMC,GAAK,MAAM,CACtCC,IAAKD,EACLP,WAAYM,EAAK5L,GACjBpB,MAAMe,EAAAA,EAAAA,KAACoM,EAAAA,GAAO,CAACC,GAAE,WAAAnM,OAAa+L,EAAK5L,IAAK6J,SAAE+B,EAAKhN,OAC/CmK,OAAQ4B,EAAAA,GAAcsB,MAAK,SAACC,GAAE,OAAKA,EAAGrN,QAAU+M,EAAK7C,MAAM,IAAE/F,MAC7DmJ,YAAaP,EAAKO,YAClBrJ,SAAUd,EAAUiK,MAClB,SAACG,GAAG,OAAKA,EAAIvN,OAAS+M,EAAK/C,gBAAgB,IAC3C7F,MACFqJ,aAAcT,EAAKS,aACnBnE,OAAQoE,EAAAA,GAA4BzJ,KAAI,SAACqF,GACvC,GAAIA,EAAOrJ,OAAS+M,EAAK1D,OACvB,OACEvI,EAAAA,EAAAA,KAAA,OACEX,UAAU,kBACV0B,MAAO,CAAE6L,SAAU,OAAQhB,MAAO,OAAQ1B,UAE1ClK,EAAAA,EAAAA,KAAC6M,EAAAA,EAAK,CACJC,MACkB,aAAhBvE,EAAOrJ,MACH,SACgB,cAAhBqJ,EAAOrJ,OACS,UAAhBqJ,EAAOrJ,MACP,UACgB,UAAhBqJ,EAAOrJ,MACP,YACA,UAEN6N,MAAI,EAAA7C,SAEH3B,EAAOlF,SAKlB,IACA2J,MAAOC,EAAAA,GAAa/J,KAAI,SAACgK,GACvB,GAAIA,EAAEhO,QAAU+M,EAAKe,MACnB,OAAOhN,EAAAA,EAAAA,KAACI,EAAAA,EAAY,CAACC,GAAI6M,EAAE7J,MAAM8J,MAAM9M,IAC3C,IAEA+M,QACEpN,EAAAA,EAAAA,KAACoM,EAAAA,GAAO,CACNC,GAAE,0BAAAnM,OAA4B+L,EAAK5L,IACnC6J,UAEAlK,EAAAA,EAAAA,KAAA,OAAAkK,UACElK,EAAAA,EAAAA,KAACqN,EAAAA,IAAc,CACbP,MAAM,QACNQ,SAAO,EACPvM,MAAO,CAAE6L,SAAU,QACnBvM,GAAG,mBAKZ,YA7SPL,EAAAA,EAAAA,KAAA,OAAKX,UAAU,WAkTnB,C,2GC3mBMkO,EAAgBC,EAAAA,EAAatK,KAAI,SAAA4J,GAAK,SAAA5M,OAAO4M,EAAK,eAC3CW,EAAyB,CAAC,UAAW,aAAc,QAAS,UAAW,WAM7E,SAASC,EAAcZ,GAE5B,QADqB7F,UAAUa,OAAS,QAAsBC,IAAjBd,UAAU,KAAmBA,UAAU,GAE3E,GAAG/G,QAAOyN,EAAAA,EAAAA,GAAmBJ,IAAgBI,EAAAA,EAAAA,GAAmBH,EAAAA,IAAeI,SAASd,GAE1FU,EAAAA,EAAaI,SAASd,EAC/B,CACO,SAASe,EAAoBf,GAClC,OAAOW,EAAuBG,SAASd,EACzC,C,wDClBO,IAAMU,EAAe,CAAC,OAAQ,SAAU,OAAQ,QAAS,UAAW,OAAQ,MAAO,SAAU,SAAU,UAAW,WAAY,OAAQ,O,uECC9H,SAASM,EAAeC,EAAOC,GAC5C,OAAOR,EAAAA,EAAaS,QAAO,SAACrG,EAAMsG,GAChC,IAAMC,EAAaJ,EAAM,GAAD7N,OAAIgO,EAAQ,MAC9BE,EAAmBL,EAAM,GAAD7N,OAAIgO,EAAQ,MACpCG,EAAYN,EAAM,GAAD7N,OAAIgO,EAAQ,MAC7BI,EAAYP,EAAM,GAAD7N,OAAIgO,EAAQ,MACnC,OAAOK,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG5G,GAAOoG,EAAOE,EAAU,CAC7DC,WAAAA,EACAC,iBAAAA,EACAC,UAAAA,EACAC,UAAAA,IAEJ,GAAG,CAAC,EACN,C","sources":["containers/form-validations/FormikFields.js","hooks/use-mousetrap.js","views/app/teachers/bio/teacher-list/TeacherListMain.js","../node_modules/antd/es/_util/colors.js","../node_modules/antd/es/theme/interface/presetColors.js","../node_modules/antd/es/theme/util/genPresetColor.js"],"sourcesContent":["import React from 'react';\nimport Select from 'react-select';\nimport { CustomInput } from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\n\nimport TagsInput from 'react-tagsinput';\nimport 'react-tagsinput/react-tagsinput.css';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\n\nimport DatePicker from 'react-multi-date-picker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Input } from 'antd';\n\nconst FormikReactSelect = ({\n  name,\n  value,\n  options,\n  isMulti,\n  className,\n  onChange,\n  onBlur,\n  onClick,\n  defaultValue,\n  isDisabled,\n  isLoading,\n  isClearable,\n  isRtl,\n  isSearchable,\n  placeholder,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <Select\n      className={`react-select ${className}`}\n      classNamePrefix=\"react-select\"\n      placeholder={\n        placeholder || <IntlMessages id=\"forms.EducationLevelDefaultValue\" />\n      }\n      options={options}\n      isMulti={isMulti}\n      initial\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={value}\n      defaultValue={defaultValue}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      isClearable={isClearable}\n      isRtl={isRtl}\n      isSearchable={isSearchable}\n    />\n  );\n};\n\nconst FormikCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              name={name}\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value.includes(child.value)}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomCheckboxGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    const valueArray = [...value] || [];\n    if (!valueArray.includes(val)) {\n      valueArray.push(val);\n    } else {\n      valueArray.splice(valueArray.indexOf(val), 1);\n    }\n    onChange(name, valueArray);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            id={`${name}_${child.value}_${index}`}\n            type=\"checkbox\"\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value.includes(child.value)}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCheckbox = ({ name, value, disabled, label, onChange, onBlur }) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <div className=\"position-relative form-check form-check-inline\">\n      <input\n        name={name}\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        checked={value}\n        disabled={disabled}\n      />\n      <label className=\"form-check-label\">{label}</label>\n    </div>\n  );\n};\n\nconst FormikCustomCheckbox = ({\n  name,\n  value,\n  disabled,\n  label,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (_event) => {\n    onChange(name, !value);\n  };\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n  return (\n    <CustomInput\n      type=\"checkbox\"\n      id={name}\n      name={name}\n      label={label}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      checked={value}\n      disabled={disabled}\n      inline\n    />\n  );\n};\n\nconst FormikRadioButtonGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <div\n            key={`${name}_${child.value}_${index}`}\n            className={`position-relative form-check ${\n              inline ? 'form-check-inline' : ''\n            }`}\n          >\n            <input\n              id={child.value}\n              name={name}\n              type=\"radio\"\n              className=\"form-check-input\"\n              onChange={() => handleChange(child.value)}\n              onBlur={handleBlur}\n              defaultChecked={value === child.value}\n              disabled={child.disabled}\n            />\n            <label className=\"form-check-label\">{child.label}</label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikCustomRadioGroup = ({\n  name,\n  value,\n  options,\n  inline = false,\n  onChange,\n  onBlur,\n}) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = () => {\n    onBlur(name, true);\n  };\n\n  return (\n    <>\n      {options.map((child, index) => {\n        return (\n          <CustomInput\n            key={`${name}_${child.value}_${index}`}\n            type=\"radio\"\n            id={`${name}_${child.value}_${index}`}\n            name={child.name}\n            label={child.label}\n            onChange={() => handleChange(child.value)}\n            onBlur={handleBlur}\n            checked={value === child.value}\n            disabled={child.disabled}\n            inline={inline}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst FormikTagsInput = ({ name, value, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return <TagsInput name={name} value={value} onChange={handleChange} />;\n};\n\nconst FormikInputText = ({ name, value, onChange, onBlur, ...otherProps }) => {\n  // const handleChange = (val) => {\n  //   onBlur(name, true);\n  //   onChange(name, val);\n  // };\n  return (\n    <Input\n      name={name}\n      value={value}\n      onChange={onChange}\n      style={{ height: 48, borderRadius: 0 }}\n      {...otherProps}\n    />\n  );\n};\n\nconst FormikSwitch = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onBlur(name, true);\n    onChange(name, val);\n  };\n\n  return (\n    <Switch\n      name={name}\n      className={className}\n      checked={value}\n      onChange={handleChange}\n    />\n  );\n};\n\nconst FormikDatePicker = ({ name, value, className, onChange, onBlur }) => {\n  const handleChange = (val) => {\n    onChange(name, val);\n  };\n\n  const handleBlur = (_val) => {\n    onBlur(name, true);\n  };\n\n  return (\n    <DatePicker\n      name={name}\n      className={className}\n      selected={value}\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n\nexport {\n  FormikReactSelect,\n  FormikCheckboxGroup,\n  FormikCustomCheckboxGroup,\n  FormikCheckbox,\n  FormikCustomCheckbox,\n  FormikRadioButtonGroup,\n  FormikCustomRadioGroup,\n  FormikTagsInput,\n  FormikInputText,\n  FormikSwitch,\n  FormikDatePicker,\n};\n","import mousetrap from 'mousetrap';\nimport { useEffect, useRef } from 'react';\n\n/**\n * Use mousetrap hook\n *\n * @param  {(string | string[])} handlerKey - A key, key combo or array of combos according to Mousetrap documentation.\n * @param  { function } handlerCallback - A function that is triggered on key combo catch.\n */\nexport default (handlerKey, handlerCallback) => {\n  const actionRef = useRef(null);\n  actionRef.current = handlerCallback;\n\n  useEffect(() => {\n    mousetrap.bind(handlerKey, (evt, combo) => {\n      typeof actionRef.current === 'function' && actionRef.current(evt, combo);\n      evt.preventDefault();\n    });\n    return () => {\n      mousetrap.unbind(handlerKey);\n    };\n  }, [handlerKey]);\n};\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport { Table as TB } from 'antd';\nimport IntlMessages from 'helpers/IntlMessages';\nimport './list.css';\nimport callApi from 'helpers/callApi';\nimport { Field, Formik } from 'formik';\nimport { FormikReactSelect } from 'containers/form-validations/FormikFields';\n\nimport {\n  genderOptions,\n  gradeOptions,\n  instituteStatusOptions,\n  teacherCurrentStatusOptions,\n} from '../../../global-data/options';\nimport useMousetrap from 'hooks/use-mousetrap';\nimport { Badge } from 'reactstrap';\n\nimport { NavLink } from 'react-router-dom';\nimport { BsPencilSquare } from 'react-icons/bs';\nimport { AuthContext } from 'context/AuthContext';\nconst getIndex = (value, arr, prop) => {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i][prop] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst pageSizes = [4, 8, 12, 20];\n\nconst ThumbListPages = ({ match }) => {\n  const { provinces, institutes } = useContext(AuthContext);\n  const [loading, setLoading] = useState(false);\n  const [tableParams, setTableParams] = useState({\n    pagination: {\n      current: 1,\n      pageSize: 10,\n    },\n  });\n\n  const provincesOptionsForList = provinces.map((province) => ({\n    column: province.value,\n    label: province.label,\n  }));\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [displayMode, setDisplayMode] = useState('thumblist');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedPageSize, setSelectedPageSize] = useState(20);\n  const [selectedGenderOption, setSelectedGenderOption] = useState({\n    column: 'all',\n    label: 'جنیست',\n  });\n  const [selectedProvinceOption, setSelectedProvinceOption] = useState({\n    column: 'all',\n    label: 'ولایت',\n  });\n  const [selectLevelOfEducationOption, setSelectLevelOfEducationOption] =\n    useState({\n      column: 'all',\n      label: 'سطح تحصیلی',\n    });\n\n  const [modalOpen, setModalOpen] = useState(false);\n  const [totalItemCount, setTotalItemCount] = useState(0);\n  const [totalPage, setTotalPage] = useState(1);\n  const [teacherId, setTeacherId] = useState('');\n  const [province, setProvince] = useState('');\n  const [district, setDistrict] = useState('');\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [items, setItems] = useState([]);\n  const [lastChecked, setLastChecked] = useState(null);\n  const [rest, setRest] = useState(0);\n  const [institute, setInstitute] = useState('');\n  const [instituteTeachers, setInstituteTeachers] = useState([]);\n  const [isFilter, setIsFilter] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const columns = [\n    {\n      // title: <PromptInput title=\"اساس نمبر\" colName=\"id\" endpoint=\"teachers\" />,\n      title: 'اساس نمبر',\n      dataIndex: 'student_id',\n      sorter: (a, b) => a.student_id - b.student_id,\n      width: '5%',\n    },\n    {\n      title: 'نوم/نام',\n      dataIndex: 'name',\n      sorter: (a, b) => a.name - b.name,\n      // render: (name) => `${name.first} ${name.last}`,\n      width: '15%',\n    },\n    {\n      title: 'د پلار نوم',\n      dataIndex: 'father_name',\n      width: '15%',\n    },\n    {\n      title: 'جنسیت',\n      dataIndex: 'gender',\n      // filters: [\n      //   { text: 'Male', value: 'male' },\n      //   { text: 'Female', value: 'female' },\n      // ],\n      // filterSearch: true,\n      // onFilter: (value, record) => {\n      //   record.gender.indexOf(value) === 0;\n      // },\n      width: '10%',\n    },\n    {\n      title: 'ولایت',\n      dataIndex: 'province',\n      width: '10%',\n    },\n    {\n      title: 'تلفون شمیره',\n      dataIndex: 'phone_number',\n      width: '12%',\n    },\n    {\n      title: 'بست',\n      dataIndex: 'grade',\n      width: '15%',\n    },\n    {\n      title: 'حالت',\n      dataIndex: 'status',\n      width: '5%',\n    },\n    {\n      title: 'اپډیټ',\n      dataIndex: 'action',\n      width: '5%',\n    },\n  ];\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [\n    selectedPageSize,\n    selectedGenderOption,\n    selectedProvinceOption,\n    selectLevelOfEducationOption,\n  ]);\n  async function fetchData(params = {}) {\n    console.log('PARAMSSSSSSSSSS: ', params);\n    setIsLoading(true);\n    let endpoint = `institute/`;\n    const params1 = {\n      ...params,\n      // if filters reseted, goto first page\n      page: !isFilter ? tableParams.pagination.current : params.page,\n      page_size: tableParams.pagination.pageSize || null,\n    };\n    // const params = {\n    //   id: teacherId,\n    //   // current_district: district,\n    //   page: currentPage,\n    //   limit: selectedPageSize,\n    //   gender: selectedGenderOption?.value,\n    //   current_province:\n    //     selectedProvinceOption?.column === 'all'\n    //       ? ''\n    //       : selectedProvinceOption?.column,\n    // };\n    // console.log('GENDER OPT', selectedProvinceOption);\n    // if (institute !== '') {\n    //   params.institute_id = institute.id;\n    // } else if (\n    //   selectedProvinceOption?.column === 'all' &&\n    //   selectedGenderOption?.column === 'all'\n    // ) {\n    //   if (rest == true) {\n    //     setDistrict('');\n    //     setTeacherId('');\n    //     setRest(false);\n    //   }\n    //   params.current_province = null;\n    //   params.gender = null;\n    // } else if (selectedProvinceOption?.column === 'all') {\n    //   params.province = null;\n    //   params.gender = selectedGenderOption?.value;\n    // } else if (selectedGenderOption?.column === 'all') {\n    //   params.gender = null;\n    // }\n    const response = await callApi(`teachers/`, '', null, params1);\n    setIsLoading(false);\n    if (response.data && response.status === 200) {\n      setInstituteTeachers(response.data);\n      console.log('TTTTTTTTTTTTTTTTTTTTTTTTT', response?.data);\n      setItems(response?.data.results);\n      setSelectedItems([]);\n      // setTotalItemCount(data);\n      setIsLoaded(true);\n    } else {\n      console.log('students error');\n    }\n  }\n\n  const handleTableChange = (pagination, filter, sorter) => {\n    setIsFilter(false);\n    setTableParams({ pagination, filter, ...sorter });\n    if (pagination.pageSize !== tableParams.pagination?.pageSize) {\n      setItems([]);\n    }\n  };\n  const onFilter = async (values) => {\n    setIsFilter(true);\n    setTableParams({\n      ...tableParams,\n      pagination: {\n        ...tableParams.pagination,\n        current: 1,\n      },\n    });\n    let params = {\n      page: 1,\n    };\n\n    params.current_province = values.filterProvince?.value;\n    params.gender = values.filterGender?.value;\n    params.status = values.filterStatus?.value;\n    params.id = values.filterId || null;\n    fetchData(params);\n  };\n  const handleResetFields = (resetForm) => {\n    resetForm({\n      values: {\n        filterId: '',\n        filterInstitute: [],\n        filterProvince: [],\n        filterGender: [],\n      },\n    });\n    setIsFilter(false);\n    fetchData();\n  };\n  useEffect(() => {\n    fetchData();\n  }, [!isFilter ? JSON.stringify(tableParams) : null]);\n\n  const onCheckItem = (event, id) => {\n    if (\n      event.target.tagName === 'A' ||\n      (event.target.parentElement && event.target.parentElement.tagName === 'A')\n    ) {\n      return true;\n    }\n    if (lastChecked === null) {\n      setLastChecked(id);\n    }\n\n    let selectedList = [...selectedItems];\n    if (selectedList.includes(id)) {\n      selectedList = selectedList.filter((x) => x !== id);\n    } else {\n      selectedList.push(id);\n    }\n    setSelectedItems(selectedList);\n\n    if (event.shiftKey) {\n      let newItems = [...items];\n      const start = getIndex(id, newItems, 'id');\n      const end = getIndex(lastChecked, newItems, 'id');\n      newItems = newItems.slice(Math.min(start, end), Math.max(start, end) + 1);\n      selectedItems.push(\n        ...newItems.map((item) => {\n          return item.id;\n        }),\n      );\n      selectedList = Array.from(new Set(selectedItems));\n      setSelectedItems(selectedList);\n    }\n    document.activeElement.blur();\n    return false;\n  };\n  const handleChangeSelectAll = (isToggle) => {\n    if (selectedItems.length >= items.length) {\n      if (isToggle) {\n        setSelectedItems([]);\n      }\n    } else {\n      setSelectedItems(items.map((x) => x.id));\n    }\n    document.activeElement.blur();\n    return false;\n  };\n\n  const onContextMenuClick = (e, data) => {\n    // params : (e,data,target)\n  };\n\n  const onContextMenu = (e, data) => {\n    const clickedProductId = data.data;\n    if (!selectedItems.includes(clickedProductId)) {\n      setSelectedItems([clickedProductId]);\n    }\n\n    return true;\n  };\n\n  useMousetrap(['ctrl+a', 'command+a'], () => {\n    handleChangeSelectAll(false);\n  });\n\n  useMousetrap(['ctrl+d', 'command+d'], () => {\n    setSelectedItems([]);\n    return false;\n  });\n\n  const startIndex = (currentPage - 1) * selectedPageSize;\n  const endIndex = currentPage * selectedPageSize;\n\n  return !isLoaded ? (\n    <div className=\"loading\" />\n  ) : (\n    <>\n      <div className=\"disable-text-selection\">\n        <h1>د استاد لست/ لست استادان</h1>\n        {/* <ListPageHeading\n          heading=\"د استاد لست/ لست استادان\"\n          displayMode={displayMode}\n          changeDisplayMode={setDisplayMode}\n          handleChangeSelectAll={handleChangeSelectAll}\n          changeGenderBy={(column) => {\n            setSelectedGenderOption(\n              genderOptionsForList.find((x) => x.value === column)\n            );\n          }}\n          changeProvinceBy={(column) => {\n            setSelectedProvinceOption(\n              provincesOptionsForList.find((x) => x.column === column)\n            );\n          }}\n          selectedGenderOption={selectedGenderOption}\n          selectedProvinceOption={selectedProvinceOption}\n          selectLevelOfEducationOption={selectLevelOfEducationOption}\n          genderOptionsForList={genderOptionsForList}\n          provincesOptionsForList={provincesOptionsForList}\n          changePageSize={setSelectedPageSize}\n          selectedPageSize={selectedPageSize}\n          totalItemCount={totalItemCount}\n          match={match}\n          startIndex={startIndex}\n          endIndex={endIndex}\n          selectedItemsLength={selectedItems ? selectedItems.length : 0}\n          itemsLength={items ? items.length : 0}\n          onIdSearchKey={(e) => {\n            if (e.key === 'Enter') {\n              setTeacherId(e.target.value.toLowerCase());\n            }\n          }}\n          onProvinceSearchKey={(e) => {\n            if (e.key === 'Enter') {\n              setProvince(e.target.value.toLowerCase());\n            }\n          }}\n          onDistrictSearchKey={(e) => {\n            if (e.key === 'Enter') {\n              setDistrict(e.target.value.toLowerCase());\n            }\n          }}\n          // Level of Education\n          changeLevelOfEducationBy={(column) => {\n            setSelectLevelOfEducationOption(\n              levelOfEdcationForList.find((x) => x.column === column)\n            );\n          }}\n          levelOfEdcationForList={levelOfEdcationForList}\n          onResetClick={setRest}\n          reset={rest}\n          pageSizes={pageSizes}\n          toggleModal={() => setModalOpen(!modalOpen)}\n          institutes={institutes}\n          onInstituteSelect={setInstitute}\n        /> */}\n        {/* <table className=\"table\">\n          <thead\n            style={{ maxHeight: '55px ' }}\n            className=\"pl-2 d-flex flex-grow-1  table-dark\"\n          >\n            <tr className=\"card-body align-self-center d-flex flex-lg-row align-items-lg-center\">\n              <th\n                className=\"\"\n                style={{\n                  width: '110px',\n                  paddingInline: '0%',\n                  textAlign: 'right',\n                  borderStyle: 'hidden',\n                  fontSize: '20px',\n                }}\n              >\n                <IntlMessages id=\"marks.No\" />\n              </th>\n              <th\n                className=\"header-responsiveness\"\n                style={{\n                  width: '170px',\n                  paddingInline: '0%',\n                  borderStyle: 'hidden',\n                  fontSize: '20px',\n                }}\n              >\n                <IntlMessages id=\"forms.StdName\" />\n              </th>\n              <th\n                className=\"header-responsiveness\"\n                style={{\n                  width: '170px',\n                  paddingInline: '0%',\n                  borderStyle: 'hidden',\n                  fontSize: '20px',\n                }}\n              >\n                <IntlMessages id=\"forms.StdFatherName\" />\n              </th>\n              <th\n                className=\"header-responsiveness1 \"\n                style={{\n                  width: '110px',\n                  paddingInline: '0%',\n                  borderStyle: 'hidden',\n                  fontSize: '20px',\n                }}\n              >\n                {' '}\n                <IntlMessages id=\"teacher.GradeLabel\" />\n              </th>\n              <th\n                className=\"header-responsiveness2 \"\n                style={{\n                  width: '110px',\n                  paddingInline: '0%',\n                  borderStyle: 'hidden',\n                  fontSize: '20px',\n                }}\n              >\n                {' '}\n                <IntlMessages id=\"teacher.Step\" />\n              </th>\n              <th\n                className=\"header-responsiveness3 \"\n                style={{\n                  width: '170px',\n                  paddingInline: '0%',\n                  borderStyle: 'hidden',\n                  fontSize: '20px',\n                }}\n              >\n                {' '}\n                <IntlMessages id=\"teacher.LevelOfEducationList\" />\n              </th>\n              <th\n                className=\"header-responsiveness4 \"\n                style={{\n                  width: '170px',\n                  paddingInline: '0%',\n                  borderStyle: 'hidden',\n                  fontSize: '20px',\n                }}\n              >\n                <IntlMessages id=\"teacher-list.MajorLabel\" />\n              </th>\n              <th\n                className=\"header-responsiveness4 \"\n                style={{\n                  width: '100px',\n                  paddingInline: '0%',\n                  borderStyle: 'hidden',\n                  fontSize: '20px',\n                }}\n              >\n                <IntlMessages id=\"teacher.status\" />\n              </th>\n            </tr>\n          </thead>\n          <ListPageListing\n            items={items}\n            displayMode={displayMode}\n            selectedItems={selectedItems}\n            onCheckItem={onCheckItem}\n            currentPage={currentPage}\n            totalPage={totalPage}\n            onContextMenuClick={onContextMenuClick}\n            onContextMenu={onContextMenu}\n            onChangePage={setCurrentPage}\n          />\n        </table> */}\n        <div\n          style={{\n            padding: 10,\n            display: 'flex',\n          }}\n        >\n          <Formik\n            initialValues={{\n              filterId: '',\n              filterInstitute: [],\n              filterProvince: [],\n            }}\n            onSubmit={onFilter}\n          >\n            {({\n              values,\n              setFieldValue,\n              handleSubmit,\n              setFieldTouched,\n              resetForm,\n            }) => (\n              <>\n                <Field name=\"filterId\" placeholder=\"ایدی\" />\n                <FormikReactSelect\n                  className=\"w-100\"\n                  placeholder=\"ولایت\"\n                  name=\"filterProvince\"\n                  options={provinces}\n                  value={values.filterProvince}\n                  onChange={setFieldValue}\n                  onBlur={setFieldTouched}\n                />\n                <FormikReactSelect\n                  className=\"w-100\"\n                  placeholder=\"جنسیت\"\n                  name=\"filterGender\"\n                  options={genderOptions}\n                  value={values.filterGender}\n                  onChange={setFieldValue}\n                  onBlur={setFieldTouched}\n                />\n                <FormikReactSelect\n                  className=\"w-100\"\n                  placeholder=\"حالت\"\n                  name=\"filterStatus\"\n                  options={instituteStatusOptions}\n                  value={values.filterStatus}\n                  onChange={setFieldValue}\n                  onBlur={setFieldTouched}\n                />\n                <button className=\"btn btn-secondary\" onClick={handleSubmit}>\n                  فلټر\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"btn btn-warning\"\n                  onClick={() => handleResetFields(resetForm)}\n                >\n                  ریسیټ\n                </button>\n              </>\n            )}\n          </Formik>\n        </div>\n        <TB\n          columns={columns}\n          // rowKey={(record) => record.login.uuid}\n          pagination={tableParams.pagination}\n          loading={isLoading}\n          onChange={handleTableChange}\n          dataSource={items.map((item, index) => ({\n            key: index,\n            student_id: item.id,\n            name: <NavLink to={`teacher/${item.id}`}>{item.name}</NavLink>,\n            gender: genderOptions.find((op) => op.value === item.gender).label,\n            father_name: item.father_name,\n            province: provinces.find(\n              (pro) => pro.value == item.current_province,\n            ).label,\n            phone_number: item.phone_number,\n            status: teacherCurrentStatusOptions.map((status) => {\n              if (status.value == item.status) {\n                return (\n                  <div\n                    className=\"mb-1 text-small\"\n                    style={{ fontSize: '20px', width: '10%' }}\n                  >\n                    <Badge\n                      color={\n                        status.value == 'dismissed'\n                          ? 'danger'\n                          : status.value == 'inprogress' ||\n                            status.value == 'active'\n                          ? 'success'\n                          : status.value == 'freeze'\n                          ? 'secondary'\n                          : 'warning'\n                      }\n                      pill\n                    >\n                      {status.label}\n                    </Badge>\n                  </div>\n                );\n              }\n            }),\n            grade: gradeOptions.map((g) => {\n              if (g.value === item.grade)\n                return <IntlMessages id={g.label.props.id} />;\n            }),\n\n            action: (\n              <NavLink\n                to={`/app/teachers/register/${item.id}`}\n                // style={{ width: '10%' }}\n              >\n                <div>\n                  <BsPencilSquare\n                    color=\"green\"\n                    outline\n                    style={{ fontSize: '20px' }}\n                    id=\"updateIcon\"\n                  />\n                </div>\n              </NavLink>\n            ),\n          }))}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ThumbListPages;\n","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { PresetColors } from '../theme/interface';\nconst inverseColors = PresetColors.map(color => `${color}-inverse`);\nexport const PresetStatusColorTypes = ['success', 'processing', 'error', 'default', 'warning'];\n/**\n * determine if the color keyword belongs to the `Ant Design` {@link PresetColors}.\n * @param color color to be judged\n * @param includeInverse whether to include reversed colors\n */\nexport function isPresetColor(color) {\n  let includeInverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (includeInverse) {\n    return [].concat(_toConsumableArray(inverseColors), _toConsumableArray(PresetColors)).includes(color);\n  }\n  return PresetColors.includes(color);\n}\nexport function isPresetStatusColor(color) {\n  return PresetStatusColorTypes.includes(color);\n}","export const PresetColors = ['blue', 'purple', 'cyan', 'green', 'magenta', 'pink', 'red', 'orange', 'yellow', 'volcano', 'geekblue', 'lime', 'gold'];","import { PresetColors } from '../interface';\nexport default function genPresetColor(token, genCss) {\n  return PresetColors.reduce((prev, colorKey) => {\n    const lightColor = token[`${colorKey}1`];\n    const lightBorderColor = token[`${colorKey}3`];\n    const darkColor = token[`${colorKey}6`];\n    const textColor = token[`${colorKey}7`];\n    return Object.assign(Object.assign({}, prev), genCss(colorKey, {\n      lightColor,\n      lightBorderColor,\n      darkColor,\n      textColor\n    }));\n  }, {});\n}"],"names":["FormikReactSelect","_ref","name","value","options","isMulti","className","onChange","onBlur","defaultValue","onClick","isDisabled","isLoading","isClearable","isRtl","isSearchable","placeholder","_jsx","Select","concat","classNamePrefix","IntlMessages","id","initial","val","FormikInputText","_ref9","otherProps","_objectWithoutProperties","_excluded","Input","_objectSpread","style","height","borderRadius","FormikDatePicker","_ref11","DatePicker","selected","_val","handlerKey","handlerCallback","actionRef","useRef","current","useEffect","mousetrap","evt","combo","preventDefault","match","_useContext","useContext","AuthContext","provinces","_useState","institutes","useState","_useState2","_slicedToArray","_useState3","pagination","pageSize","_useState4","tableParams","setTableParams","_useState5","map","province","column","label","_useState6","isLoaded","setIsLoaded","_useState7","_useState8","_useState9","_useState10","setCurrentPage","_useState11","_useState12","selectedPageSize","_useState13","_useState14","selectedGenderOption","_useState15","_useState16","selectedProvinceOption","_useState17","_useState18","selectLevelOfEducationOption","_useState19","_useState20","_useState21","_useState22","_useState23","_useState24","_useState25","_useState26","_useState27","_useState28","_useState29","_useState30","_useState31","_useState32","selectedItems","setSelectedItems","_useState33","_useState34","items","setItems","_useState35","_useState36","_useState37","_useState38","_useState39","_useState40","_useState41","_useState42","setInstituteTeachers","_useState43","_useState44","isFilter","setIsFilter","_useState45","_useState46","setIsLoading","fetchData","_fetchData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","params","params1","response","_args2","wrap","_context2","prev","next","length","undefined","console","log","page","page_size","callApi","sent","data","status","results","stop","onFilter","_ref2","_callee","values","_values$filterProvinc","_values$filterGender","_values$filterStatus","_context","current_province","filterProvince","gender","filterGender","filterStatus","filterId","_x","JSON","stringify","useMousetrap","isToggle","x","document","activeElement","blur","_Fragment","children","_jsxs","padding","display","Formik","initialValues","filterInstitute","onSubmit","_ref3","setFieldValue","handleSubmit","setFieldTouched","resetForm","Field","genderOptions","instituteStatusOptions","type","handleResetFields","TB","columns","title","dataIndex","sorter","a","b","student_id","width","loading","filter","_tableParams$paginati","dataSource","item","index","key","NavLink","to","find","op","father_name","pro","phone_number","teacherCurrentStatusOptions","fontSize","Badge","color","pill","grade","gradeOptions","g","props","action","BsPencilSquare","outline","inverseColors","PresetColors","PresetStatusColorTypes","isPresetColor","_toConsumableArray","includes","isPresetStatusColor","genPresetColor","token","genCss","reduce","colorKey","lightColor","lightBorderColor","darkColor","textColor","Object","assign"],"sourceRoot":""}