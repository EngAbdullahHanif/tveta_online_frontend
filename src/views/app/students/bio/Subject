
import React, {useState} from 'react';
import { Formik, Form, Field } from 'formik';


import * as Yup from 'yup';
import {
  Row,
  Card,
  CardBody,
  FormGroup,
  Label,
  Button,
  CardTitle,
} from 'reactstrap';
import IntlMessages from 'helpers/IntlMessages';
import { Colxx } from 'components/common/CustomBootstrap';
import {
  FormikReactSelect,
  FormikTagsInput,
  FormikDatePicker,
} from '../../../../containers/form-validations/FormikFields';

const SignupSchema = Yup.object().shape({

SubjectName: Yup.string()
    //  .min(3, <IntlMessages id="forms.StdId" />)
    .required(<IntlMessages id="forms.SubjectNameErr" />),
  
    //  SubjectCredit: Yup.number()
    // .required(<IntlMessages id="forms.SubjectCreditErr" />),
     
    // SubjectType : Yup.number()
    // .required(<IntlMessages id="forms.SubjectTypeErr" />),
  // The yup validation of the selection should be studied
                                
 
});

const SubjectCreditOptions =  [
  { value: '1', label: "1"  },
  { value: '2', label:  "2"},
  { value: '3', label: "3"},
  { value: '4', label: "4"},
];

const SubjectTypeOptions =  [
  { value: '1', label:  <IntlMessages id = "forms.TypeOption_1"/> },
  { value: '2', label: <IntlMessages id = "forms.TypeOption_2"/>},


];




const StudentAttendance = () => {
  const onSubmit = (values, { setSubmitting }) => {
    const payload = {
      ...values,
      state: values.state.value,
    };
    setTimeout(() => {
      console.log(JSON.stringify(payload, null, 2));
      setSubmitting(false);
    }, 1000);
  };

  

  return (
    <>
      
      <Card>
        <h3 className="mt-5 m-5">{ <IntlMessages id="forms.SubjectTitle" />}</h3>
                    <CardBody>   
       <Formik
            initialValues={{   
              SubjectCredit: { value: '', label: <IntlMessages id="forms.TazkiraTypeDefaultValue" /> },
               SubjectType: { value: '', label: <IntlMessages id="forms.TazkiraTypeDefaultValue" /> },

                  }}
                  validationSchema={SignupSchema}
                  onSubmit={onSubmit}
                >
                  {({
                    handleSubmit,
                    setFieldValue,
                    setFieldTouched,
                    handleChange,
                    handleBlur,
                    values,
                    errors,
                    touched,
                    isSubmitting,
                  }) => (
              <Form className="av-tooltip tooltip-label-bottom">
                
         
             <Row className='justify-content-center'>
                  <Colxx xxs="10">
                    
                    {/* Student Id */}
                    <FormGroup className="form-group has-float-label">
                      <Label>
                        <IntlMessages id="forms.SubjectNameLabel" />
                      </Label>
                      <Field className="form-control" name="SubjectName" />
                      {errors.SubjectName && touched.SubjectName ? (
                        <div className="invalid-feedback d-block">
                          {errors.SubjectName}
                        </div>
                      ) : null}
                    </FormGroup>

                    

                    {/*Credit */}
                         <FormGroup className="form-group has-float-label">
                      <Label>
                        <IntlMessages id="forms.SubjectCreditLabel" />
                      </Label>
                      <FormikReactSelect
                        name="SubjectCredit"
                        id="SubjectCredit"
                        value={values.SubjectCredit}
                        options={SubjectCreditOptions}
                        onChange={setFieldValue}
                        onBlur={setFieldTouched}
                          />    
                      {errors.SubjectCredit && touched.SubjectCredit ? (
                        <div className="invalid-feedback d-block">
                          {errors.SubjectCredit}
                        </div>
                      ) : null}
                    </FormGroup>

                    
                    {/*Type */}
                               <FormGroup className="form-group has-float-label">
                      <Label>
                        <IntlMessages id="forms.SubjectTypeLabel" />
                      </Label>
                      <FormikReactSelect
                        name="SubjectType"
                        id="SubjectType"
                        value={values.SubjectType}
                        options={SubjectTypeOptions}
                        onChange={setFieldValue}
                        onBlur={setFieldTouched}
                          />    
                      {errors.SubjectType && touched.SubjectType ? (
                        <div className="invalid-feedback d-block">
                          {errors.SubjectType}
                        </div>
                      ) : null}
                    </FormGroup>
                    

                    <Button className="float-right m-3 ">{<IntlMessages id="forms.SubimssionButton"/> }
                    </Button>
                      
                  </Colxx>
                </Row>
              



          </Form>
                  )}
                </Formik>
         
       </CardBody>
                    </Card>
      </>
  );
};

export default StudentAttendance;


